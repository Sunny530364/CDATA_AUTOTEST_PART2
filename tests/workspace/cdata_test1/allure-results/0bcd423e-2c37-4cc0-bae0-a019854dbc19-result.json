{"name": "测试onu端口vlan为translate", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS", "trace": "vlan_translate_suit = <telnetlib.Telnet object at 0x000001904C19B908>\n\n    @allure.feature(\"onu端口vlan测试\")\n    @allure.story(\"onu端口vlan测试\")\n    @allure.title(\"测试onu端口vlan为translate\")\n    @pytest.mark.run(order=1619)\n    def test_onu_translate(vlan_translate_suit):\n        '''\n        用例描述\n        测试目的： 测试onu端口为translate，translate100-107 转2000-2007,测试上下行流量是否正常\n        测试步骤：\n        步骤1: 发现未注册的ONU\n        步骤2: 在OLT上通过Gpon_SN的方式将ONU注册上线\n        步骤3：配置onu端口translate(100-108)转成（2000-2007）\n        步骤4：添加虚端口vlan透传2000,2001,2002, 2003, 2004, 2005, 2006, 2007, 2008\n        步骤5：打流测试\n        1）下行发vlan2000-2008的流，上行发vlan100-108的流\n         down_stream_header = (\n            'ethernetII_1.sourceMacAdd=00:00:00:11:11:11 vlan_1.id=2000  ethernetII_1.destMacAdd=00:00:00:22:22:21',\n            'ethernetII_1.sourceMacAdd=00:00:00:11:11:12 vlan_1.id=2001  ethernetII_1.destMacAdd=00:00:00:22:22:22',\n            'ethernetII_1.sourceMacAdd=00:00:00:11:11:13 vlan_1.id=2002  ethernetII_1.destMacAdd=00:00:00:22:22:23',\n            'ethernetII_1.sourceMacAdd=00:00:00:11:11:14 vlan_1.id=2003  ethernetII_1.destMacAdd=00:00:00:22:22:24',\n            'ethernetII_1.sourceMacAdd=00:00:00:11:11:15 vlan_1.id=2004  ethernetII_1.destMacAdd=00:00:00:22:22:25',\n            'ethernetII_1.sourceMacAdd=00:00:00:11:11:16 vlan_1.id=2005  ethernetII_1.destMacAdd=00:00:00:22:22:26',\n            'ethernetII_1.sourceMacAdd=00:00:00:11:11:17 vlan_1.id=2006  ethernetII_1.destMacAdd=00:00:00:22:22:27',\n            'ethernetII_1.sourceMacAdd=00:00:00:11:11:18 vlan_1.id=2007  ethernetII_1.destMacAdd=00:00:00:22:22:28',\n            'ethernetII_1.sourceMacAdd=00:00:00:11:11:19 vlan_1.id=2008  ethernetII_1.destMacAdd=00:00:00:22:22:29')\n        up_stream_header = (\n            'ethernetII_1.sourceMacAdd=00:00:00:22:22:21 vlan_1.id=100  ethernetII_1.destMacAdd=00:00:00:11:11:11',\n            'ethernetII_1.sourceMacAdd=00:00:00:22:22:22 vlan_1.id=101  ethernetII_1.destMacAdd=00:00:00:11:11:12',\n            'ethernetII_1.sourceMacAdd=00:00:00:22:22:23 vlan_1.id=102  ethernetII_1.destMacAdd=00:00:00:11:11:13',\n            'ethernetII_1.sourceMacAdd=00:00:00:22:22:24 vlan_1.id=103  ethernetII_1.destMacAdd=00:00:00:11:11:14',\n            'ethernetII_1.sourceMacAdd=00:00:00:22:22:25 vlan_1.id=104  ethernetII_1.destMacAdd=00:00:00:11:11:15',\n            'ethernetII_1.sourceMacAdd=00:00:00:22:22:26 vlan_1.id=105  ethernetII_1.destMacAdd=00:00:00:11:11:16',\n            'ethernetII_1.sourceMacAdd=00:00:00:22:22:27 vlan_1.id=106 ethernetII_1.destMacAdd=00:00:00:11:11:17',\n            'ethernetII_1.sourceMacAdd=00:00:00:22:22:28 vlan_1.id=107 ethernetII_1.destMacAdd=00:00:00:11:11:18',\n            'ethernetII_1.sourceMacAdd=00:00:00:22:22:29 vlan_1.id=108  ethernetII_1.destMacAdd=00:00:00:11:11:19')\n        预期结果: 下行vlan2000-2007的通，下行vlan2008的不通；上行vlan100-107的通，上行vlan108的不通\n        步骤6：onu端口vlan恢复为transparent\n        '''\n    \n        cdata_info(\"=========测试ONU端口vlan为translate=========\")\n    \n        tn = vlan_translate_suit\n        with allure.step('步骤1:发现未注册的ONU。'):\n            assert autofind_onu(tn, Gpon_PonID, Gpon_OnuID, Gpon_SN)\n        with allure.step('步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线。'):\n            assert auth_by_sn(tn, Gpon_PonID, Gpon_OnuID, Ont_Lineprofile_ID, Ont_Srvprofile_ID, Gpon_SN)\n        with allure.step(\"步骤3:配置onu端口translate(100-800)转成（2000-2007）\"):\n            S_Vlan_list = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007]\n            C_Vlan_list = [100,101,102,103,104,105,106,107]\n            assert ont_port_translate(tn,Ont_Srvprofile_ID,Ont_Port_ID,S_Vlan_list,C_Vlan_list)\n        with allure.step(\"步骤4:添加虚端口vlan透传2000,2001,2002, 2003, 2004, 2005, 2006, 2007, 2008\"):\n            Vlan_list = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008]\n            assert add_service_port(tn, Gpon_PonID, Gpon_OnuID, Gemport_ID, Vlan_list)\n        with  allure.step(\"步骤5:打流测试\"):\n            # 清除测试仪的对象，防止影响下个用例的执行\n            time.sleep(5)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n    \n            #'//192.168.0.180/1/9'连接上联口，'//192.168.0.180/1/10'连接onu端口\n            # port_location = ['//192.168.0.180/1/9', '//192.168.0.180/1/10']\n            #跑流的时长为10s\n            duration = 10\n            # 发流量测试，发送三条流vlan100，和vlan200,和vlan300\n            down_stream_header = (\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:11 vlan_1.id=2000  ethernetII_1.destMacAdd=00:00:00:22:22:21 ipv4_1.source=192.168.0.11 ipv4_1.destination=192.168.0.21',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:12 vlan_1.id=2001  ethernetII_1.destMacAdd=00:00:00:22:22:22 ipv4_1.source=192.168.0.12 ipv4_1.destination=192.168.0.22',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:13 vlan_1.id=2002  ethernetII_1.destMacAdd=00:00:00:22:22:23 ipv4_1.source=192.168.0.13 ipv4_1.destination=192.168.0.23',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:14 vlan_1.id=2003  ethernetII_1.destMacAdd=00:00:00:22:22:24 ipv4_1.source=192.168.0.14 ipv4_1.destination=192.168.0.24',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:15 vlan_1.id=2004  ethernetII_1.destMacAdd=00:00:00:22:22:25 ipv4_1.source=192.168.0.15 ipv4_1.destination=192.168.0.25',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:16 vlan_1.id=2005  ethernetII_1.destMacAdd=00:00:00:22:22:26 ipv4_1.source=192.168.0.16 ipv4_1.destination=192.168.0.26',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:17 vlan_1.id=2006  ethernetII_1.destMacAdd=00:00:00:22:22:27 ipv4_1.source=192.168.0.17 ipv4_1.destination=192.168.0.27',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:18 vlan_1.id=2007  ethernetII_1.destMacAdd=00:00:00:22:22:28 ipv4_1.source=192.168.0.18 ipv4_1.destination=192.168.0.28',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:19 vlan_1.id=2008  ethernetII_1.destMacAdd=00:00:00:22:22:29 ipv4_1.source=192.168.0.19 ipv4_1.destination=192.168.0.29'\n            )\n    \n            up_stream_header = (\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:21 vlan_1.id=100  ethernetII_1.destMacAdd=00:00:00:11:11:11 ipv4_1.source=192.168.0.21 ipv4_1.destination=192.168.0.11',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:22 vlan_1.id=101  ethernetII_1.destMacAdd=00:00:00:11:11:12 ipv4_1.source=192.168.0.22 ipv4_1.destination=192.168.0.12',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:23 vlan_1.id=102  ethernetII_1.destMacAdd=00:00:00:11:11:13 ipv4_1.source=192.168.0.23 ipv4_1.destination=192.168.0.13',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:24 vlan_1.id=103  ethernetII_1.destMacAdd=00:00:00:11:11:14 ipv4_1.source=192.168.0.24 ipv4_1.destination=192.168.0.14',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:25 vlan_1.id=104  ethernetII_1.destMacAdd=00:00:00:11:11:15 ipv4_1.source=192.168.0.25 ipv4_1.destination=192.168.0.15',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:26 vlan_1.id=105  ethernetII_1.destMacAdd=00:00:00:11:11:16 ipv4_1.source=192.168.0.26 ipv4_1.destination=192.168.0.16',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:27 vlan_1.id=106  ethernetII_1.destMacAdd=00:00:00:11:11:17 ipv4_1.source=192.168.0.27 ipv4_1.destination=192.168.0.17',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:28 vlan_1.id=107  ethernetII_1.destMacAdd=00:00:00:11:11:18 ipv4_1.source=192.168.0.28 ipv4_1.destination=192.168.0.18',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:29 vlan_1.id=108  ethernetII_1.destMacAdd=00:00:00:11:11:19 ipv4_1.source=192.168.0.29 ipv4_1.destination=192.168.0.19'\n            )\n            result_stats = unicast_test(port_location=port_location, down_stream_header=down_stream_header,\n                                        up_stream_header=up_stream_header, num=9, dataclassname=StreamBlockStats,\n                                        stream_header=['Ethernet.ethernetII', 'VLAN.vlan', 'IPv4.ipv4', 'UDP.udp'],\n                                        duration=duration)\n    \n            for i in range(18):\n                if (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:11':\n                    result11 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:12':\n                    result12 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:13':\n                    result13 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:14':\n                    result14 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:15':\n                    result15 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:16':\n                    result16 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:17':\n                    result17 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:18':\n                    result18 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:21':\n                    result21 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:22':\n                    result22 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:23':\n                    result23 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:24':\n                    result24 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:25':\n                    result25 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:26':\n                    result26 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:27':\n                    result27 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:28':\n                    result28 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:19':\n                    result19 = check_stream_loss1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:29':\n                    result29 = check_stream_loss1(result_stats[i])\n    \n            # 恢复默认配置\n            # ont_port_trunk_del(tn)\n    \n            # 正确的结果vlan2000和vlan2001的能通，vlan2002的不通\n            if result11 == 'PASS' and result12 == 'PASS' and result13 == 'PASS' and result14 == 'PASS' \\\n                    and result15 == 'PASS' and result16 == 'PASS' and result17 == 'PASS' and result18 == 'PASS' \\\n                    and result21 == 'PASS' and result22 == 'PASS' and result23 == 'PASS' and result24 == 'PASS' \\\n                    and result25 == 'PASS' and result26 == 'PASS' and result27 == 'PASS' \\\n                    and result19 == 'PASS' and result29 == 'PASS':\n                result = 'PASS'\n                cdata_info(\"ONU端口为translate:打流测试正常\")\n            else:\n                result = 'FAIL'\n                cdata_error(\"ONU端口为translate:打流测试失败\")\n>           assert result == 'PASS'\nE           AssertionError: assert 'FAIL' == 'PASS'\nE             - FAIL\nE             + PASS\n\nFD1616GS\\test_onu_vlan.py:410: AssertionError"}, "description": "\n    用例描述\n    测试目的： 测试onu端口为translate，translate100-107 转2000-2007,测试上下行流量是否正常\n    测试步骤：\n    步骤1: 发现未注册的ONU\n    步骤2: 在OLT上通过Gpon_SN的方式将ONU注册上线\n    步骤3：配置onu端口translate(100-108)转成（2000-2007）\n    步骤4：添加虚端口vlan透传2000,2001,2002, 2003, 2004, 2005, 2006, 2007, 2008\n    步骤5：打流测试\n    1）下行发vlan2000-2008的流，上行发vlan100-108的流\n     down_stream_header = (\n        'ethernetII_1.sourceMacAdd=00:00:00:11:11:11 vlan_1.id=2000  ethernetII_1.destMacAdd=00:00:00:22:22:21',\n        'ethernetII_1.sourceMacAdd=00:00:00:11:11:12 vlan_1.id=2001  ethernetII_1.destMacAdd=00:00:00:22:22:22',\n        'ethernetII_1.sourceMacAdd=00:00:00:11:11:13 vlan_1.id=2002  ethernetII_1.destMacAdd=00:00:00:22:22:23',\n        'ethernetII_1.sourceMacAdd=00:00:00:11:11:14 vlan_1.id=2003  ethernetII_1.destMacAdd=00:00:00:22:22:24',\n        'ethernetII_1.sourceMacAdd=00:00:00:11:11:15 vlan_1.id=2004  ethernetII_1.destMacAdd=00:00:00:22:22:25',\n        'ethernetII_1.sourceMacAdd=00:00:00:11:11:16 vlan_1.id=2005  ethernetII_1.destMacAdd=00:00:00:22:22:26',\n        'ethernetII_1.sourceMacAdd=00:00:00:11:11:17 vlan_1.id=2006  ethernetII_1.destMacAdd=00:00:00:22:22:27',\n        'ethernetII_1.sourceMacAdd=00:00:00:11:11:18 vlan_1.id=2007  ethernetII_1.destMacAdd=00:00:00:22:22:28',\n        'ethernetII_1.sourceMacAdd=00:00:00:11:11:19 vlan_1.id=2008  ethernetII_1.destMacAdd=00:00:00:22:22:29')\n    up_stream_header = (\n        'ethernetII_1.sourceMacAdd=00:00:00:22:22:21 vlan_1.id=100  ethernetII_1.destMacAdd=00:00:00:11:11:11',\n        'ethernetII_1.sourceMacAdd=00:00:00:22:22:22 vlan_1.id=101  ethernetII_1.destMacAdd=00:00:00:11:11:12',\n        'ethernetII_1.sourceMacAdd=00:00:00:22:22:23 vlan_1.id=102  ethernetII_1.destMacAdd=00:00:00:11:11:13',\n        'ethernetII_1.sourceMacAdd=00:00:00:22:22:24 vlan_1.id=103  ethernetII_1.destMacAdd=00:00:00:11:11:14',\n        'ethernetII_1.sourceMacAdd=00:00:00:22:22:25 vlan_1.id=104  ethernetII_1.destMacAdd=00:00:00:11:11:15',\n        'ethernetII_1.sourceMacAdd=00:00:00:22:22:26 vlan_1.id=105  ethernetII_1.destMacAdd=00:00:00:11:11:16',\n        'ethernetII_1.sourceMacAdd=00:00:00:22:22:27 vlan_1.id=106 ethernetII_1.destMacAdd=00:00:00:11:11:17',\n        'ethernetII_1.sourceMacAdd=00:00:00:22:22:28 vlan_1.id=107 ethernetII_1.destMacAdd=00:00:00:11:11:18',\n        'ethernetII_1.sourceMacAdd=00:00:00:22:22:29 vlan_1.id=108  ethernetII_1.destMacAdd=00:00:00:11:11:19')\n    预期结果: 下行vlan2000-2007的通，下行vlan2008的不通；上行vlan100-107的通，上行vlan108的不通\n    步骤6：onu端口vlan恢复为transparent\n    ", "steps": [{"name": "步骤1:发现未注册的ONU。", "status": "passed", "start": 1599822748031, "stop": 1599822749178}, {"name": "步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线。", "status": "passed", "start": 1599822749178, "stop": 1599822759467}, {"name": "步骤3:配置onu端口translate(100-800)转成（2000-2007）", "status": "passed", "start": 1599822759467, "stop": 1599822781629}, {"name": "步骤4:添加虚端口vlan透传2000,2001,2002, 2003, 2004, 2005, 2006, 2007, 2008", "status": "passed", "start": 1599822781629, "stop": 1599822791640}, {"name": "步骤5:打流测试", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS\n", "trace": "  File \"E:\\CDATA\\自动化测试\\Cdata_part11\\tests\\FD1616GS\\test_onu_vlan.py\", line 410, in test_onu_translate\n    assert result == 'PASS'\n"}, "start": 1599822791640, "stop": 1599822828760}], "attachments": [{"name": "log", "source": "f28a77bd-af0c-4eeb-b2f6-f0f1c497a9b5-attachment.txt", "type": "text/plain"}], "start": 1599822748031, "stop": 1599822828761, "uuid": "4d7597c3-225c-41e9-89f4-c1bf0f1887a0", "historyId": "c26c0f15ee054e4c2a3b214168b8725a", "testCaseId": "b289f51e3b542f864235ae458971774e", "fullName": "test_onu_vlan#test_onu_translate", "labels": [{"name": "feature", "value": "onu端口vlan测试"}, {"name": "story", "value": "onu端口vlan测试"}, {"name": "suite", "value": "test_onu_vlan"}, {"name": "host", "value": "DESKTOP-2JV12RE"}, {"name": "thread", "value": "19156-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_onu_vlan"}]}