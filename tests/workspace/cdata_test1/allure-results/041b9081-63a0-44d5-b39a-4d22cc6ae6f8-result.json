{"name": "测试dba限速(type4)", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS", "trace": "dba_limitrate_suit = <telnetlib.Telnet object at 0x000001904C268A90>\n\n    @allure.feature(\"onu限速测试\")\n    @allure.story(\"dba限速测试\")\n    @allure.title(\"测试dba限速(type4)\")\n    @pytest.mark.run(order=1623)\n    def test_dba_limitrate(dba_limitrate_suit):\n        '''\n        用例描述\n        测试目的： 测试dba限速是否正常（type5）\n        测试步骤：\n        步骤1: 发现未注册的ONU\n        步骤2: 在OLT上通过Gpon_Gpon_SN的方式将ONU注册上线\n        步骤3: 配置dba模板(type5 fix 10240 assure 20480 max 51200)\n        步骤4: 配置虚端口vlan2000透传\n        步骤5: 打流测试\n        测试方法: 上下行各发送流：vlan2000 (如果onu端口为1000M,速率为端口速率的10%;如果onu端口为100M,速率为端口速率的100%)\n        down_stream_header = ('ethernetII_1.sourceMacAdd=00:00:00:11:11:11 vlan_1.id=2000  ethernetII_1.destMacAdd=00:00:00:22:22:21',)\n        up_stream_header = ('ethernetII_1.sourceMacAdd=00:00:00:22:22:21 vlan_1.id=2000  ethernetII_1.destMacAdd=00:00:00:11:11:11',)\n        预期结果: 上下行正常通，上行不限速，下行限速50M\n        步骤6: 配置dba模板(type4  max 1024000)\n    \n        '''\n    \n        # tn=login\n        # #配置dba模板\n        # dba_limitrate_type5(tn, dba_profile_id=100)\n        cdata_info(\"=========DBA限速测试=========\")\n        tn = dba_limitrate_suit\n        Vlan_list = [2000]\n    \n        with allure.step('步骤1:发现未注册的ONU。'):\n            assert autofind_onu(tn, Gpon_PonID,  Gpon_OnuID, Gpon_SN)\n        with allure.step('步骤2:在OLT上通过Gpon_Gpon_SN的方式将ONU注册上线。'):\n            assert auth_by_sn(tn ,Gpon_PonID, Gpon_OnuID, Ont_Lineprofile_ID, Ont_Srvprofile_ID, Gpon_SN)\n        with allure.step('步骤3:配置dba模板'):\n            assert dba_limitrate_type5(tn, Dba_Profile_ID,fix= '10240',assure = '20480',max='51200')\n        with allure.step('步骤4:添加虚端口vlan透传2000'):\n            assert add_service_port(tn, Gpon_PonID, Gpon_OnuID, Gemport_ID, Vlan_list)\n        with allure.step('步骤5:打流测试。'):\n            # 清除测试仪的对象，防止影响下个用例的执行\n            time.sleep(8)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n            ont_speed = check_ont_capability(tn,Gpon_PonID,Gpon_OnuID,Ont_Port_ID)\n            # 发流量测试，上下行发送流量，速率为100M\n            # port_location = ['//192.168.0.180/1/9', '//192.168.0.180/1/10']\n            duration = 10\n            down_stream_header = (\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:11 vlan_1.id=2000  ethernetII_1.destMacAdd=00:00:00:22:22:21 ipv4_1.source=192.168.1.11 ipv4_1.destination=192.168.1.21',)\n    \n            up_stream_header = (\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:21 vlan_1.id=2000  ethernetII_1.destMacAdd=00:00:00:11:11:11 ipv4_1.source=192.168.1.21 ipv4_1.destination=192.168.1.11',)\n            # 获取所有流量的统计值\n            result_stats = rate_test(port_location=port_location, down_stream_header=down_stream_header,\n                                     up_stream_header=up_stream_header,\n                                     rate=100,\n                                     duration=duration)\n    \n            if port2_speed == 'SPEED_100M' and port1_speed == 'SPEED_100M':\n                # onu端口为1000M，上下行都发送端口速率的100%，也就是100M,onu端口下行限10M,所以下行比例是（10/100）=0.1， 上行是（100/100）=1\n                result1 = check_stream_rate(result_stats[0], result_stats[1], inbound_percent=0.5, outbound_percent=1)\n            elif port2_speed == 'SPEED_100M' and port1_speed == 'SPEED_1G':\n                # onu端口为1000M，上下行都发送端口速率的10%，也就是100M,onu端口下行限10M,所以下行比例是（10/100）=0.1， 上行是（100/100）=1\n                result1 = check_stream_rate(result_stats[0], result_stats[1], inbound_percent=0.05, outbound_percent=1)\n            elif port2_speed == 'SPEED_1G' and port1_speed == 'SPEED_100M':\n                # onu端口为100M，上下行都发送端口速率的100%，也就是下行1000M,上行100M,onu端口下行限10M,所以下行比例是（10/1000）=0.01， 上行是（100/100）=1\n                result1 = check_stream_rate(result_stats[0], result_stats[1], inbound_percent=0.5, outbound_percent=0.1)\n            elif port2_speed == 'SPEED_1G' and port1_speed == 'SPEED_1G':\n                # onu端口为100M，上下行都发送端口速率的100%，也就是下行1000M,上行100M,onu端口下行限10M,所以下行比例是（10/1000）=0.01， 上行是（100/100）=1\n                result1 = check_stream_rate(result_stats[0], result_stats[1], inbound_percent=0.05, outbound_percent=1)\n    \n    \n            # 正确的结果pri2的能通，pri3的不通\n            if result1 == 'PASS' :\n                result = 'PASS'\n                cdata_info(\"DBA限速:打流测试正常\")\n            else:\n                result = 'FAIL'\n                cdata_error(\"DBA限速:打流测试失败\")\n            time.sleep(2)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n>           assert result == 'PASS'\nE           AssertionError: assert 'FAIL' == 'PASS'\nE             - FAIL\nE             + PASS\n\nFD1616GS\\test_onu_limitrate.py:278: AssertionError"}, "description": "\n    用例描述\n    测试目的： 测试dba限速是否正常（type5）\n    测试步骤：\n    步骤1: 发现未注册的ONU\n    步骤2: 在OLT上通过Gpon_Gpon_SN的方式将ONU注册上线\n    步骤3: 配置dba模板(type5 fix 10240 assure 20480 max 51200)\n    步骤4: 配置虚端口vlan2000透传\n    步骤5: 打流测试\n    测试方法: 上下行各发送流：vlan2000 (如果onu端口为1000M,速率为端口速率的10%;如果onu端口为100M,速率为端口速率的100%)\n    down_stream_header = ('ethernetII_1.sourceMacAdd=00:00:00:11:11:11 vlan_1.id=2000  ethernetII_1.destMacAdd=00:00:00:22:22:21',)\n    up_stream_header = ('ethernetII_1.sourceMacAdd=00:00:00:22:22:21 vlan_1.id=2000  ethernetII_1.destMacAdd=00:00:00:11:11:11',)\n    预期结果: 上下行正常通，上行不限速，下行限速50M\n    步骤6: 配置dba模板(type4  max 1024000)\n\n    ", "steps": [{"name": "步骤1:发现未注册的ONU。", "status": "passed", "start": 1599823148023, "stop": 1599823149116}, {"name": "步骤2:在OLT上通过Gpon_Gpon_SN的方式将ONU注册上线。", "status": "passed", "start": 1599823149116, "stop": 1599823160372}, {"name": "步骤3:配置dba模板", "status": "passed", "start": 1599823160372, "stop": 1599823162937}, {"name": "步骤4:添加虚端口vlan透传2000", "status": "passed", "start": 1599823162937, "stop": 1599823164941}, {"name": "步骤5:打流测试。", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS\n", "trace": "  File \"E:\\CDATA\\自动化测试\\Cdata_part11\\tests\\FD1616GS\\test_onu_limitrate.py\", line 278, in test_dba_limitrate\n    assert result == 'PASS'\n"}, "start": 1599823164941, "stop": 1599823194946}], "attachments": [{"name": "log", "source": "531fded2-3a0e-45ae-b6dd-74c3c6a3f223-attachment.txt", "type": "text/plain"}], "start": 1599823148022, "stop": 1599823194947, "uuid": "bd63e835-ca35-41a8-9456-d97d6d2df9aa", "historyId": "654b3fba71a845305f5dc56a62ba5e59", "testCaseId": "0417ce4ff42354195ccdcbe02d941591", "fullName": "test_onu_limitrate#test_dba_limitrate", "labels": [{"name": "feature", "value": "onu限速测试"}, {"name": "story", "value": "dba限速测试"}, {"name": "suite", "value": "test_onu_limitrate"}, {"name": "host", "value": "DESKTOP-2JV12RE"}, {"name": "thread", "value": "19156-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_onu_limitrate"}]}