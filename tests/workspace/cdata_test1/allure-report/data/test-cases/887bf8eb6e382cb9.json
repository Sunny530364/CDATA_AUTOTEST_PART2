{
  "uid" : "887bf8eb6e382cb9",
  "name" : "测试onu跨组播vlan",
  "fullName" : "test_onu_multicast#test_ont_cross_mvlan",
  "historyId" : "9243f40ca1ff480677bc2d6ac7954ee9",
  "time" : {
    "start" : 1599823430651,
    "stop" : 1599823507499,
    "duration" : 76848
  },
  "description" : "\n    用例描述\n    测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为2000，测试onu的跨组播vlan是否正常的\n    测试步骤：\n    步骤1:发现未注册的ONU\n    步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线\n    步骤3:配置onu端口native-vlan为2000\n    步骤4:添加虚端口vlan透传2000\n    步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n    步骤6:打流测试\n    1）客户端发送report报文加入组播239.1.1.1 ，然后服务端口发送组播239.1.1.1的数据流，10秒后，停止发流\n    multicaststream_header=('ethernetII_1.destMacAdd=01:00:5e:01:01:01 vlan_1.id=3000 ipv4_1.destination=239.1.1.1')\n    预期结果：服务端收到report报文，客户端收到组播数据流239.1.1.1\n    2)服务端发送组播数据流，客户端发送离开报文，离开组播组239.1.1.1\n    预期结果：客户端接收不到数据\n\n    ",
  "descriptionHtml" : "<pre><code>用例描述\n测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为2000，测试onu的跨组播vlan是否正常的\n测试步骤：\n步骤1:发现未注册的ONU\n步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线\n步骤3:配置onu端口native-vlan为2000\n步骤4:添加虚端口vlan透传2000\n步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n步骤6:打流测试\n1）客户端发送report报文加入组播239.1.1.1 ，然后服务端口发送组播239.1.1.1的数据流，10秒后，停止发流\nmulticaststream_header=('ethernetII_1.destMacAdd=01:00:5e:01:01:01 vlan_1.id=3000 ipv4_1.destination=239.1.1.1')\n预期结果：服务端收到report报文，客户端收到组播数据流239.1.1.1\n2)服务端发送组播数据流，客户端发送离开报文，离开组播组239.1.1.1\n预期结果：客户端接收不到数据\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
  "statusTrace" : "login = <telnetlib.Telnet object at 0x000001904C2B8588>\n\n    @allure.feature(\"onu 组播测试\")\n    @allure.story(\"onu 组播snooping测试\")\n    @allure.title(\"测试onu跨组播vlan\")\n    @pytest.mark.run(order=1626)\n    def test_ont_cross_mvlan(login):\n        '''\n        用例描述\n        测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为2000，测试onu的跨组播vlan是否正常的\n        测试步骤：\n        步骤1:发现未注册的ONU\n        步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线\n        步骤3:配置onu端口native-vlan为2000\n        步骤4:添加虚端口vlan透传2000\n        步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n        步骤6:打流测试\n        1）客户端发送report报文加入组播239.1.1.1 ，然后服务端口发送组播239.1.1.1的数据流，10秒后，停止发流\n        multicaststream_header=('ethernetII_1.destMacAdd=01:00:5e:01:01:01 vlan_1.id=3000 ipv4_1.destination=239.1.1.1')\n        预期结果：服务端收到report报文，客户端收到组播数据流239.1.1.1\n        2)服务端发送组播数据流，客户端发送离开报文，离开组播组239.1.1.1\n        预期结果：客户端接收不到数据\n    \n        '''\n        renix_info(\"=========ONU组播snooping测试:跨组播vlan测试=========\")\n        cdata_info(\"=========ONU组播snooping测试:跨组播vlan测试=========\")\n        tn = login\n        Vlan_list = [2000]\n        User_Vlan = \"2000\"\n        with allure.step('步骤1:发现未注册的ONU。'):\n            assert autofind_onu(tn, Gpon_PonID, Gpon_OnuID, Gpon_SN)\n        with allure.step('步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线。'):\n            assert auth_by_sn(tn, Gpon_PonID, Gpon_OnuID, Ont_Lineprofile_ID, Ont_Srvprofile_ID, Gpon_SN)\n        with allure.step(\"步骤3：配置onu端口native-vlan为2000\"):\n            assert ont_native_vlan(tn, Gpon_PonID, Gpon_OnuID, Ont_Port_ID, User_Vlan)\n        with allure.step(\"步骤4：添加虚端口vlan透传2000\"):\n            assert add_service_port(tn, Gpon_PonID, Gpon_OnuID, Gemport_ID, Vlan_list)\n        with allure.step(\"步骤5:onu端口绑定组播模板\"):\n            assert ont_multicast(tn, Gpon_PonID, Gpon_OnuID,Ont_Port_ID,Ont_Igmpprofile_ID)\n        with allure.step(\"步骤6:onu组播打流测试\"):\n    \n            time.sleep(3)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n    \n            # 发流测试\n            result = multicast_test(port_location=port_location,\n                                    multicaststream_header=('ethernetII_1.destMacAdd=01:00:5e:01:01:01 vlan_1.id=3000 ipv4_1.destination=239.1.1.1'),\n                                    multicastgroupip='239.1.1.1',\n                                    duration=10)\n            time.sleep(3)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n            if result == 'PASS':\n                cdata_info(\"测试onu跨组播vlan的情况:打流测试正常\")\n            else:\n                cdata_error(\"测试onu跨组播vlan的情况:打流测试失败\")\n    \n>           assert result=='PASS'\nE           AssertionError: assert 'FAIL' == 'PASS'\nE             - FAIL\nE             + PASS\n\nFD1616GS\\test_onu_multicast.py:225: AssertionError",
  "flaky" : true,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_skip_sensitive",
    "time" : {
      "start" : 1599823415467,
      "stop" : 1599823415467,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "sensitive_url",
    "time" : {
      "start" : 1599821387651,
      "stop" : 1599821387651,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "base_url",
    "time" : {
      "start" : 1599821387651,
      "stop" : 1599821387651,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "_verify_url",
    "time" : {
      "start" : 1599821387651,
      "stop" : 1599821387651,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "__pytest_repeat_step_number",
    "time" : {
      "start" : 1599823415467,
      "stop" : 1599823415467,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "login",
    "time" : {
      "start" : 1599823415467,
      "stop" : 1599823430650,
      "duration" : 15183
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "\n    用例描述\n    测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为2000，测试onu的跨组播vlan是否正常的\n    测试步骤：\n    步骤1:发现未注册的ONU\n    步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线\n    步骤3:配置onu端口native-vlan为2000\n    步骤4:添加虚端口vlan透传2000\n    步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n    步骤6:打流测试\n    1）客户端发送report报文加入组播239.1.1.1 ，然后服务端口发送组播239.1.1.1的数据流，10秒后，停止发流\n    multicaststream_header=('ethernetII_1.destMacAdd=01:00:5e:01:01:01 vlan_1.id=3000 ipv4_1.destination=239.1.1.1')\n    预期结果：服务端收到report报文，客户端收到组播数据流239.1.1.1\n    2)服务端发送组播数据流，客户端发送离开报文，离开组播组239.1.1.1\n    预期结果：客户端接收不到数据\n\n    ",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
    "statusTrace" : "login = <telnetlib.Telnet object at 0x000001904C2B8588>\n\n    @allure.feature(\"onu 组播测试\")\n    @allure.story(\"onu 组播snooping测试\")\n    @allure.title(\"测试onu跨组播vlan\")\n    @pytest.mark.run(order=1626)\n    def test_ont_cross_mvlan(login):\n        '''\n        用例描述\n        测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为2000，测试onu的跨组播vlan是否正常的\n        测试步骤：\n        步骤1:发现未注册的ONU\n        步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线\n        步骤3:配置onu端口native-vlan为2000\n        步骤4:添加虚端口vlan透传2000\n        步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n        步骤6:打流测试\n        1）客户端发送report报文加入组播239.1.1.1 ，然后服务端口发送组播239.1.1.1的数据流，10秒后，停止发流\n        multicaststream_header=('ethernetII_1.destMacAdd=01:00:5e:01:01:01 vlan_1.id=3000 ipv4_1.destination=239.1.1.1')\n        预期结果：服务端收到report报文，客户端收到组播数据流239.1.1.1\n        2)服务端发送组播数据流，客户端发送离开报文，离开组播组239.1.1.1\n        预期结果：客户端接收不到数据\n    \n        '''\n        renix_info(\"=========ONU组播snooping测试:跨组播vlan测试=========\")\n        cdata_info(\"=========ONU组播snooping测试:跨组播vlan测试=========\")\n        tn = login\n        Vlan_list = [2000]\n        User_Vlan = \"2000\"\n        with allure.step('步骤1:发现未注册的ONU。'):\n            assert autofind_onu(tn, Gpon_PonID, Gpon_OnuID, Gpon_SN)\n        with allure.step('步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线。'):\n            assert auth_by_sn(tn, Gpon_PonID, Gpon_OnuID, Ont_Lineprofile_ID, Ont_Srvprofile_ID, Gpon_SN)\n        with allure.step(\"步骤3：配置onu端口native-vlan为2000\"):\n            assert ont_native_vlan(tn, Gpon_PonID, Gpon_OnuID, Ont_Port_ID, User_Vlan)\n        with allure.step(\"步骤4：添加虚端口vlan透传2000\"):\n            assert add_service_port(tn, Gpon_PonID, Gpon_OnuID, Gemport_ID, Vlan_list)\n        with allure.step(\"步骤5:onu端口绑定组播模板\"):\n            assert ont_multicast(tn, Gpon_PonID, Gpon_OnuID,Ont_Port_ID,Ont_Igmpprofile_ID)\n        with allure.step(\"步骤6:onu组播打流测试\"):\n    \n            time.sleep(3)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n    \n            # 发流测试\n            result = multicast_test(port_location=port_location,\n                                    multicaststream_header=('ethernetII_1.destMacAdd=01:00:5e:01:01:01 vlan_1.id=3000 ipv4_1.destination=239.1.1.1'),\n                                    multicastgroupip='239.1.1.1',\n                                    duration=10)\n            time.sleep(3)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n            if result == 'PASS':\n                cdata_info(\"测试onu跨组播vlan的情况:打流测试正常\")\n            else:\n                cdata_error(\"测试onu跨组播vlan的情况:打流测试失败\")\n    \n>           assert result=='PASS'\nE           AssertionError: assert 'FAIL' == 'PASS'\nE             - FAIL\nE             + PASS\n\nFD1616GS\\test_onu_multicast.py:225: AssertionError",
    "steps" : [ {
      "name" : "步骤1:发现未注册的ONU。",
      "time" : {
        "start" : 1599823430653,
        "stop" : 1599823431747,
        "duration" : 1094
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线。",
      "time" : {
        "start" : 1599823431747,
        "stop" : 1599823449096,
        "duration" : 17349
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "步骤3：配置onu端口native-vlan为2000",
      "time" : {
        "start" : 1599823449096,
        "stop" : 1599823449234,
        "duration" : 138
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "步骤4：添加虚端口vlan透传2000",
      "time" : {
        "start" : 1599823449234,
        "stop" : 1599823453242,
        "duration" : 4008
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "步骤5:onu端口绑定组播模板",
      "time" : {
        "start" : 1599823453242,
        "stop" : 1599823455415,
        "duration" : 2173
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "步骤6:onu组播打流测试",
      "time" : {
        "start" : 1599823455415,
        "stop" : 1599823507498,
        "duration" : 52083
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS\n",
      "statusTrace" : "  File \"E:\\CDATA\\自动化测试\\Cdata_part11\\tests\\FD1616GS\\test_onu_multicast.py\", line 225, in test_ont_cross_mvlan\n    assert result=='PASS'\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "556d848ca73d5e24",
      "name" : "log",
      "source" : "556d848ca73d5e24.txt",
      "type" : "text/plain",
      "size" : 2774
    } ],
    "parameters" : [ ],
    "stepsCount" : 6,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "login::0",
    "time" : {
      "start" : 1599823507510,
      "stop" : 1599823519623,
      "duration" : 12113
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "onu 组播snooping测试"
  }, {
    "name" : "feature",
    "value" : "onu 组播测试"
  }, {
    "name" : "suite",
    "value" : "test_onu_multicast"
  }, {
    "name" : "host",
    "value" : "DESKTOP-2JV12RE"
  }, {
    "name" : "thread",
    "value" : "19156-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_onu_multicast"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 4,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 1,
        "unknown" : 0,
        "total" : 6
      },
      "items" : [ {
        "uid" : "ac6041f53c76422c",
        "reportUrl" : "http://192.168.0.182:8080/job/cdata_test1/370/allure/#testresult/ac6041f53c76422c",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
        "time" : {
          "start" : 1599730315806,
          "stop" : 1599730390664,
          "duration" : 74858
        }
      }, {
        "uid" : "8d4c6255b9bfdc26",
        "reportUrl" : "http://192.168.0.182:8080/job/cdata_test1/361/allure/#testresult/8d4c6255b9bfdc26",
        "status" : "passed",
        "time" : {
          "start" : 1599621542709,
          "stop" : 1599621624207,
          "duration" : 81498
        }
      }, {
        "uid" : "f325a7789a20cd74",
        "reportUrl" : "http://192.168.0.182:8080/job/cdata_test1/280/allure/#testresult/f325a7789a20cd74",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
        "time" : {
          "start" : 1598838859530,
          "stop" : 1598838944306,
          "duration" : 84776
        }
      }, {
        "uid" : "f4c262f3d775451",
        "reportUrl" : "http://192.168.0.182:8080/job/cdata_test1/276/allure/#testresult/f4c262f3d775451",
        "status" : "broken",
        "statusDetails" : "Exception: 设备登录失败",
        "time" : {
          "start" : 1598618096119,
          "stop" : 1598618096119,
          "duration" : 0
        }
      }, {
        "uid" : "8c231bc159eed66e",
        "reportUrl" : "http://192.168.0.182:8080/job/cdata_test1/272/allure/#testresult/8c231bc159eed66e",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
        "time" : {
          "start" : 1598595549111,
          "stop" : 1598595627812,
          "duration" : 78701
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "887bf8eb6e382cb9.json",
  "parameterValues" : [ ]
}