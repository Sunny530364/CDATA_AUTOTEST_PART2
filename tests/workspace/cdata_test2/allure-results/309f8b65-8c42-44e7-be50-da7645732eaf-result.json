{"name": "测试mapping为transaprent", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS", "trace": "login = <telnetlib.Telnet object at 0x000001C22E9C47B8>\n\n    @allure.feature(\"gemport测试\")\n    @allure.story(\"gemport测试\")\n    @allure.title(\"测试mapping为transaprent\")\n    @pytest.mark.run(order=1612)\n    def test_gemport_transparent(login):\n        '''\n        用例描述\n        测试目的： 测试mapping-mode is vlan , mapping 为transparent时，vlan2000和vlan2001的报文上下行是都正常\n        测试步骤：\n        步骤1:发现未注册的ONU\n        步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线\n        步骤3:修改gemport配置为transparent\n        步骤4:配置虚端口vlan2000透传，vlan2001透传\n        步骤5:打流测试\n        1）上下行发vlan2000和vlan2001的报文\n        down_stream_header = (\n            'ethernetII_1.sourceMacAdd=00:00:00:11:11:11 vlan_1.id=2000 ethernetII_1.destMacAdd=00:00:00:22:22:21',\n            'ethernetII_1.sourceMacAdd=00:00:00:11:11:12 vlan_1.id=2001 ethernetII_1.destMacAdd=00:00:00:22:22:22')\n        up_stream_header = (\n            'ethernetII_1.sourceMacAdd=00:00:00:22:22:21 vlan_1.id=2000 ethernetII_1.destMacAdd=00:00:00:11:11:11',\n            'ethernetII_1.sourceMacAdd=00:00:00:22:22:22 vlan_1.id=2001 ethernetII_1.destMacAdd=00:00:00:11:11:12',)\n        预期结果：上下行报文正常通\n    \n        '''\n        cdata_info(\"=========gemport为tranparent测试=========\")\n        Vlan_list = [2000, 2001]\n        tn = login\n        with allure.step('步骤1:发现未注册的ONU。'):\n            assert autofind_onu(tn, Gpon_PonID, Gpon_OnuID, Gpon_SN)\n        with allure.step('步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线。'):\n            assert auth_by_sn(tn, Gpon_PonID, Gpon_OnuID, Ont_Lineprofile_ID, Ont_Srvprofile_ID, Gpon_SN)\n        with allure.step(\"步骤3:修改gemport配置为transparent\"):\n            assert gemport_transparent(tn,Ont_Lineprofile_ID)\n        with allure.step(\"步骤4:配置虚端口vlan2000透传，vlan2001透传\"):\n            assert add_service_port(tn, Gpon_PonID, Gpon_OnuID, Gemport_ID, Vlan_list)\n        with allure.step(\"步骤5:打流测试\"):\n            time.sleep(8)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n            #发送2条流量,vlan2000,2001，结果应该是两条流都是通的\n            #配置参数：\n    \n            # port_location = ['//192.168.0.180/1/9', '//192.168.0.180/1/10']\n            duration = 10\n            down_stream_header = ('ethernetII_1.sourceMacAdd=00:00:00:11:11:11 vlan_1.id=2000 ethernetII_1.destMacAdd=00:00:00:22:22:21',\n                                  'ethernetII_1.sourceMacAdd=00:00:00:11:11:12 vlan_1.id=2001 ethernetII_1.destMacAdd=00:00:00:22:22:22')\n    \n    \n            up_stream_header = ('ethernetII_1.sourceMacAdd=00:00:00:22:22:21 vlan_1.id=2000 ethernetII_1.destMacAdd=00:00:00:11:11:11',\n                                'ethernetII_1.sourceMacAdd=00:00:00:22:22:22 vlan_1.id=2001 ethernetII_1.destMacAdd=00:00:00:11:11:12',\n                               )\n    \n            #获取所有流量的统计值\n            result_stats = unicast_test(port_location=port_location, down_stream_header=down_stream_header,\n                         up_stream_header=up_stream_header, num=2,dataclassname=StreamBlockStats, duration=duration)\n    \n            # # 判断vlan2000的上下行流量是否都是通的，如果是返回PASS，否则返回FAIL\n            # result1 = check_stream_static(result_stats[0], result_stats[2])\n            # # 判断vlan2001的上下行流量是否都是通的，如果是返回PASS，否则返回FAIL\n            # result2 = check_stream_static(result_stats[1], result_stats[3])\n    \n            for i in range(4):\n                if (result_stats[i].__dict__)['_StreamBlockID']=='sourceMacAdd=00:00:00:11:11:11':\n                    result11 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID']=='sourceMacAdd=00:00:00:11:11:12':\n                    result12 = check_stream_static1(result_stats[i])\n    \n                elif (result_stats[i].__dict__)['_StreamBlockID']=='sourceMacAdd=00:00:00:22:22:21':\n                    result21 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID']=='sourceMacAdd=00:00:00:22:22:22':\n                    result22 = check_stream_static1(result_stats[i])\n    \n            # 正确的结果vlan2000的能通，vlan2001的能通\n            if result11 == 'PASS' and result12 == 'PASS' and result21 == 'PASS' and result22 == 'PASS':\n                result = 'PASS'\n                cdata_info(\"gemport为transparent测试:打流测试正常\")\n            else:\n                result = 'FAIL'\n                cdata_error(\"gemport为transparent测试:打流测试失败\")\n>           assert result == 'PASS'\nE           AssertionError: assert 'FAIL' == 'PASS'\nE             - FAIL\nE             + PASS\n\nFD1616GS\\test_onu_gemport.py:204: AssertionError"}, "description": "\n    用例描述\n    测试目的： 测试mapping-mode is vlan , mapping 为transparent时，vlan2000和vlan2001的报文上下行是都正常\n    测试步骤：\n    步骤1:发现未注册的ONU\n    步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线\n    步骤3:修改gemport配置为transparent\n    步骤4:配置虚端口vlan2000透传，vlan2001透传\n    步骤5:打流测试\n    1）上下行发vlan2000和vlan2001的报文\n    down_stream_header = (\n        'ethernetII_1.sourceMacAdd=00:00:00:11:11:11 vlan_1.id=2000 ethernetII_1.destMacAdd=00:00:00:22:22:21',\n        'ethernetII_1.sourceMacAdd=00:00:00:11:11:12 vlan_1.id=2001 ethernetII_1.destMacAdd=00:00:00:22:22:22')\n    up_stream_header = (\n        'ethernetII_1.sourceMacAdd=00:00:00:22:22:21 vlan_1.id=2000 ethernetII_1.destMacAdd=00:00:00:11:11:11',\n        'ethernetII_1.sourceMacAdd=00:00:00:22:22:22 vlan_1.id=2001 ethernetII_1.destMacAdd=00:00:00:11:11:12',)\n    预期结果：上下行报文正常通\n\n    ", "steps": [{"name": "步骤1:发现未注册的ONU。", "status": "passed", "start": 1598231595995, "stop": 1598231597145}, {"name": "步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线。", "status": "passed", "start": 1598231597146, "stop": 1598231611139}, {"name": "步骤3:修改gemport配置为transparent", "status": "passed", "start": 1598231611139, "stop": 1598231611387}, {"name": "步骤4:配置虚端口vlan2000透传，vlan2001透传", "status": "passed", "start": 1598231611387, "stop": 1598231615221}, {"name": "步骤5:打流测试", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS\n", "trace": "  File \"E:\\CDATA\\自动化测试\\Cdata_part11\\tests\\FD1616GS\\test_onu_gemport.py\", line 204, in test_gemport_transparent\n    assert result == 'PASS'\n"}, "start": 1598231615221, "stop": 1598231643588}], "attachments": [{"name": "log", "source": "66301e8d-1b8d-4207-b300-9153aed3317f-attachment.txt", "type": "text/plain"}], "start": 1598231595990, "stop": 1598231643589, "uuid": "bb7dd80f-af02-4507-923d-319477c1d696", "historyId": "2d66ba5643622279420b529e22d2458f", "testCaseId": "30b62549ffa91ba2ac9a182c837c9a76", "fullName": "test_onu_gemport#test_gemport_transparent", "labels": [{"name": "feature", "value": "gemport测试"}, {"name": "story", "value": "gemport测试"}, {"name": "suite", "value": "test_onu_gemport"}, {"name": "host", "value": "DESKTOP-2JV12RE"}, {"name": "thread", "value": "24612-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_onu_gemport"}]}