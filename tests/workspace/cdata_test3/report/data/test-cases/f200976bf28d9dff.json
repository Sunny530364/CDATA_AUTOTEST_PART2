{
  "uid" : "f200976bf28d9dff",
  "name" : "测试onu组播正常通的情况",
  "fullName" : "test_onu_multicast#test_ont_snooping_001",
  "historyId" : "728f1e173e08f34ab8fbb27ff2f72749",
  "time" : {
    "start" : 1598274404449,
    "stop" : 1598274489839,
    "duration" : 85390
  },
  "description" : "\n    用例描述\n    测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为3000，测试onu为snooping模式下组播239.1.1.1是否通\n    测试步骤：\n    步骤1:发现未注册的ONU\n    步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线\n    步骤3:配置onu端口native-vlan为3000\n    步骤4:添加虚端口vlan透传3000\n    步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n    步骤6:打流测试\n    1）服务端发送数据流239.1.1.1，查看onu端口是否收到组播数据流239.1.1.1\n    multicaststream_header=('ethernetII_1.destMacAdd=01:00:5e:01:01:01 vlan_1.id=3000 ipv4_1.destination=239.1.1.1')\n    预期结果:onu端口无法收到组播数据流\n    2）客户端发送report报文加入组播239.1.1.1 ，然后服务端口发送组播239.1.1.1的数据流(带tag3000)，10秒后，停止发流\n    预期结果:服务端收到report报文，客户端收到组播数据流239.1.1.1\n    3)客户端端口发送离开报文，离开组播组239.1.1.1\n    预期结果：客户端接收不到数据\n    ",
  "descriptionHtml" : "<pre><code>用例描述\n测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为3000，测试onu为snooping模式下组播239.1.1.1是否通\n测试步骤：\n步骤1:发现未注册的ONU\n步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线\n步骤3:配置onu端口native-vlan为3000\n步骤4:添加虚端口vlan透传3000\n步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n步骤6:打流测试\n1）服务端发送数据流239.1.1.1，查看onu端口是否收到组播数据流239.1.1.1\nmulticaststream_header=('ethernetII_1.destMacAdd=01:00:5e:01:01:01 vlan_1.id=3000 ipv4_1.destination=239.1.1.1')\n预期结果:onu端口无法收到组播数据流\n2）客户端发送report报文加入组播239.1.1.1 ，然后服务端口发送组播239.1.1.1的数据流(带tag3000)，10秒后，停止发流\n预期结果:服务端收到report报文，客户端收到组播数据流239.1.1.1\n3)客户端端口发送离开报文，离开组播组239.1.1.1\n预期结果：客户端接收不到数据\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
  "statusTrace" : "login = <telnetlib.Telnet object at 0x0000027024862A58>\n\n    @allure.feature(\"onu 组播测试\")\n    @allure.story(\"onu 组播snooping测试\")\n    @allure.title(\"测试onu组播正常通的情况\")\n    @pytest.mark.run(order=1624)\n    def test_ont_snooping_001(login):\n        '''\n        用例描述\n        测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为3000，测试onu为snooping模式下组播239.1.1.1是否通\n        测试步骤：\n        步骤1:发现未注册的ONU\n        步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线\n        步骤3:配置onu端口native-vlan为3000\n        步骤4:添加虚端口vlan透传3000\n        步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n        步骤6:打流测试\n        1）服务端发送数据流239.1.1.1，查看onu端口是否收到组播数据流239.1.1.1\n        multicaststream_header=('ethernetII_1.destMacAdd=01:00:5e:01:01:01 vlan_1.id=3000 ipv4_1.destination=239.1.1.1')\n        预期结果:onu端口无法收到组播数据流\n        2）客户端发送report报文加入组播239.1.1.1 ，然后服务端口发送组播239.1.1.1的数据流(带tag3000)，10秒后，停止发流\n        预期结果:服务端收到report报文，客户端收到组播数据流239.1.1.1\n        3)客户端端口发送离开报文，离开组播组239.1.1.1\n        预期结果：客户端接收不到数据\n        '''\n        renix_info(\"=========ONU组播snooping测试:组播正常通=========\")\n        cdata_info(\"=========ONU组播snooping测试:组播正常通=========\")\n        tn = login\n        Vlan_list=[3000]\n        User_Vlan = \"3000\"\n        with allure.step('步骤1:发现未注册的ONU。'):\n            assert autofind_onu(tn, Gpon_PonID,  Gpon_OnuID, Gpon_SN)\n        with allure.step('步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线。'):\n            assert auth_by_sn(tn ,Gpon_PonID, Gpon_OnuID, Ont_Lineprofile_ID, Ont_Srvprofile_ID, Gpon_SN)\n        with allure.step(\"步骤3:配置onu端口native-vlan为3000\"):\n            assert ont_native_vlan(tn, Gpon_PonID, Gpon_OnuID, Ont_Port_ID, User_Vlan)\n        with allure.step(\"步骤4:添加虚端口vlan透传3000\"):\n            assert add_service_port(tn, Gpon_PonID, Gpon_OnuID, Gemport_ID, Vlan_list)\n        with allure.step(\"步骤5:onu端口绑定组播模板\"):\n            assert ont_multicast(tn, Gpon_PonID, Gpon_OnuID, Ont_Port_ID, Ont_Igmpprofile_ID)\n        with allure.step(\"步骤6:onu组播打流测试\"):\n            # 配置ont端口native-vlan为3000，onu端口1绑定组播模板（mvlan3000,ip 239.1.1.1）\n    \n            time.sleep(3)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n            #发流测试\n            result = multicast_test(port_location=port_location,\n                           multicaststream_header=('ethernetII_1.destMacAdd=01:00:5e:01:01:01 vlan_1.id=3000 ipv4_1.destination=239.1.1.1'),\n                           multicastgroupip='239.1.1.1',\n                           duration=10)\n    \n            time.sleep(3)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n            if result == 'PASS':\n                cdata_info(\"测试onu组播正常通的情况:打流测试正常\")\n            else:\n                cdata_error(\"测试onu组播正常通的情况:打流测试失败\")\n    \n>           assert result == 'PASS'\nE           AssertionError: assert 'FAIL' == 'PASS'\nE             - FAIL\nE             + PASS\n\nFD1616GS\\test_onu_multicast.py:108: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_verify_url",
    "time" : {
      "start" : 1598272724833,
      "stop" : 1598272724833,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "base_url",
    "time" : {
      "start" : 1598272724833,
      "stop" : 1598272724833,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "_skip_sensitive",
    "time" : {
      "start" : 1598274390449,
      "stop" : 1598274390449,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "__pytest_repeat_step_number",
    "time" : {
      "start" : 1598274390448,
      "stop" : 1598274390448,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "sensitive_url",
    "time" : {
      "start" : 1598272724833,
      "stop" : 1598272724833,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "login",
    "time" : {
      "start" : 1598274390449,
      "stop" : 1598274404448,
      "duration" : 13999
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "description" : "\n    用例描述\n    测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为3000，测试onu为snooping模式下组播239.1.1.1是否通\n    测试步骤：\n    步骤1:发现未注册的ONU\n    步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线\n    步骤3:配置onu端口native-vlan为3000\n    步骤4:添加虚端口vlan透传3000\n    步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n    步骤6:打流测试\n    1）服务端发送数据流239.1.1.1，查看onu端口是否收到组播数据流239.1.1.1\n    multicaststream_header=('ethernetII_1.destMacAdd=01:00:5e:01:01:01 vlan_1.id=3000 ipv4_1.destination=239.1.1.1')\n    预期结果:onu端口无法收到组播数据流\n    2）客户端发送report报文加入组播239.1.1.1 ，然后服务端口发送组播239.1.1.1的数据流(带tag3000)，10秒后，停止发流\n    预期结果:服务端收到report报文，客户端收到组播数据流239.1.1.1\n    3)客户端端口发送离开报文，离开组播组239.1.1.1\n    预期结果：客户端接收不到数据\n    ",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
    "statusTrace" : "login = <telnetlib.Telnet object at 0x0000027024862A58>\n\n    @allure.feature(\"onu 组播测试\")\n    @allure.story(\"onu 组播snooping测试\")\n    @allure.title(\"测试onu组播正常通的情况\")\n    @pytest.mark.run(order=1624)\n    def test_ont_snooping_001(login):\n        '''\n        用例描述\n        测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为3000，测试onu为snooping模式下组播239.1.1.1是否通\n        测试步骤：\n        步骤1:发现未注册的ONU\n        步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线\n        步骤3:配置onu端口native-vlan为3000\n        步骤4:添加虚端口vlan透传3000\n        步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n        步骤6:打流测试\n        1）服务端发送数据流239.1.1.1，查看onu端口是否收到组播数据流239.1.1.1\n        multicaststream_header=('ethernetII_1.destMacAdd=01:00:5e:01:01:01 vlan_1.id=3000 ipv4_1.destination=239.1.1.1')\n        预期结果:onu端口无法收到组播数据流\n        2）客户端发送report报文加入组播239.1.1.1 ，然后服务端口发送组播239.1.1.1的数据流(带tag3000)，10秒后，停止发流\n        预期结果:服务端收到report报文，客户端收到组播数据流239.1.1.1\n        3)客户端端口发送离开报文，离开组播组239.1.1.1\n        预期结果：客户端接收不到数据\n        '''\n        renix_info(\"=========ONU组播snooping测试:组播正常通=========\")\n        cdata_info(\"=========ONU组播snooping测试:组播正常通=========\")\n        tn = login\n        Vlan_list=[3000]\n        User_Vlan = \"3000\"\n        with allure.step('步骤1:发现未注册的ONU。'):\n            assert autofind_onu(tn, Gpon_PonID,  Gpon_OnuID, Gpon_SN)\n        with allure.step('步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线。'):\n            assert auth_by_sn(tn ,Gpon_PonID, Gpon_OnuID, Ont_Lineprofile_ID, Ont_Srvprofile_ID, Gpon_SN)\n        with allure.step(\"步骤3:配置onu端口native-vlan为3000\"):\n            assert ont_native_vlan(tn, Gpon_PonID, Gpon_OnuID, Ont_Port_ID, User_Vlan)\n        with allure.step(\"步骤4:添加虚端口vlan透传3000\"):\n            assert add_service_port(tn, Gpon_PonID, Gpon_OnuID, Gemport_ID, Vlan_list)\n        with allure.step(\"步骤5:onu端口绑定组播模板\"):\n            assert ont_multicast(tn, Gpon_PonID, Gpon_OnuID, Ont_Port_ID, Ont_Igmpprofile_ID)\n        with allure.step(\"步骤6:onu组播打流测试\"):\n            # 配置ont端口native-vlan为3000，onu端口1绑定组播模板（mvlan3000,ip 239.1.1.1）\n    \n            time.sleep(3)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n            #发流测试\n            result = multicast_test(port_location=port_location,\n                           multicaststream_header=('ethernetII_1.destMacAdd=01:00:5e:01:01:01 vlan_1.id=3000 ipv4_1.destination=239.1.1.1'),\n                           multicastgroupip='239.1.1.1',\n                           duration=10)\n    \n            time.sleep(3)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n            if result == 'PASS':\n                cdata_info(\"测试onu组播正常通的情况:打流测试正常\")\n            else:\n                cdata_error(\"测试onu组播正常通的情况:打流测试失败\")\n    \n>           assert result == 'PASS'\nE           AssertionError: assert 'FAIL' == 'PASS'\nE             - FAIL\nE             + PASS\n\nFD1616GS\\test_onu_multicast.py:108: AssertionError",
    "steps" : [ {
      "name" : "步骤1:发现未注册的ONU。",
      "time" : {
        "start" : 1598274404451,
        "stop" : 1598274405555,
        "duration" : 1104
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "步骤2:在OLT上通过Gpon_SN的方式将ONU注册上线。",
      "time" : {
        "start" : 1598274405555,
        "stop" : 1598274431132,
        "duration" : 25577
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "步骤3:配置onu端口native-vlan为3000",
      "time" : {
        "start" : 1598274431133,
        "stop" : 1598274431314,
        "duration" : 181
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "步骤4:添加虚端口vlan透传3000",
      "time" : {
        "start" : 1598274431315,
        "stop" : 1598274435335,
        "duration" : 4020
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "步骤5:onu端口绑定组播模板",
      "time" : {
        "start" : 1598274435335,
        "stop" : 1598274437515,
        "duration" : 2180
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "步骤6:onu组播打流测试",
      "time" : {
        "start" : 1598274437515,
        "stop" : 1598274489837,
        "duration" : 52322
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS\n",
      "statusTrace" : "  File \"E:\\CDATA\\自动化测试\\Cdata_part11\\tests\\FD1616GS\\test_onu_multicast.py\", line 108, in test_ont_snooping_001\n    assert result == 'PASS'\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "3e40cb5d93d147b9",
      "name" : "log",
      "source" : "3e40cb5d93d147b9.txt",
      "type" : "text/plain",
      "size" : 2719
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 6,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "login::0",
    "time" : {
      "start" : 1598274489861,
      "stop" : 1598274503080,
      "duration" : 13219
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "onu 组播snooping测试"
  }, {
    "name" : "feature",
    "value" : "onu 组播测试"
  }, {
    "name" : "suite",
    "value" : "test_onu_multicast"
  }, {
    "name" : "host",
    "value" : "DESKTOP-2JV12RE"
  }, {
    "name" : "thread",
    "value" : "14976-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_onu_multicast"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "f200976bf28d9dff.json",
  "parameterValues" : [ ]
}