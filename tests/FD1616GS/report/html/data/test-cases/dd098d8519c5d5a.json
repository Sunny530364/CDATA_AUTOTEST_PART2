{
  "uid" : "dd098d8519c5d5a",
  "name" : "测试onu组播正常不通的情况",
  "fullName" : "test_onu_multicast#test_ont_snooping_002",
  "historyId" : "4a045f6038f940a99fcba952eb1fcc5c",
  "time" : {
    "start" : 1594693275940,
    "stop" : 1594693356768,
    "duration" : 80828
  },
  "description" : "\n    用例描述\n    测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为3000，测试onu为snooping模式下组播239.2.2.2是否不通\n    测试步骤：\n    步骤1:发现未注册的ONU\n    步骤2:在OLT上通过SN的方式将ONU注册上线\n    步骤3:配置onu端口native-vlan为3000\n    步骤4:添加虚端口vlan透传3000\n    步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n    步骤6:打流测试\n    1）客户端发送report报文加入组播239.2.2.2 ，然后服务端口发送组播239.2.2.2的数据流\n    预期结果：服务端口收到report报文收不到，客户端接收不到组播239.2.2.2的组播数据流\n\n    ",
  "descriptionHtml" : "<pre><code>用例描述\n测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为3000，测试onu为snooping模式下组播239.2.2.2是否不通\n测试步骤：\n步骤1:发现未注册的ONU\n步骤2:在OLT上通过SN的方式将ONU注册上线\n步骤3:配置onu端口native-vlan为3000\n步骤4:添加虚端口vlan透传3000\n步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n步骤6:打流测试\n1）客户端发送report报文加入组播239.2.2.2 ，然后服务端口发送组播239.2.2.2的数据流\n预期结果：服务端口收到report报文收不到，客户端接收不到组播239.2.2.2的组播数据流\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
  "statusTrace" : "login = <telnetlib.Telnet object at 0x000002C9619E15C0>\n\n    @allure.feature(\"onu 组播测试\")\n    @allure.story(\"onu 组播snooping测试\")\n    @allure.title(\"测试onu组播正常不通的情况\")\n    @pytest.mark.run(order=23)\n    def test_ont_snooping_002(login):\n        '''\n        用例描述\n        测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为3000，测试onu为snooping模式下组播239.2.2.2是否不通\n        测试步骤：\n        步骤1:发现未注册的ONU\n        步骤2:在OLT上通过SN的方式将ONU注册上线\n        步骤3:配置onu端口native-vlan为3000\n        步骤4:添加虚端口vlan透传3000\n        步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n        步骤6:打流测试\n        1）客户端发送report报文加入组播239.2.2.2 ，然后服务端口发送组播239.2.2.2的数据流\n        预期结果：服务端口收到report报文收不到，客户端接收不到组播239.2.2.2的组播数据流\n    \n        '''\n        cdata_info(\"=========ONU组播snooping测试:组播正常不通=========\")\n        tn = login\n        Vlan_list = [3000]\n        User_Vlan = \"3000\"\n        with allure.step('步骤1:发现未注册的ONU。'):\n            assert autofind_onu(tn, PonID, OnuID, SN)\n        with allure.step('步骤2:在OLT上通过SN的方式将ONU注册上线。'):\n            assert auth_by_sn(tn, PonID, OnuID, Ont_Lineprofile_ID, Ont_Srvprofile_ID, SN)\n        with allure.step(\"步骤3:配置onu端口native-vlan为3000\"):\n            assert ont_native_vlan(tn, PonID, OnuID, Ont_Port_ID, User_Vlan)\n        with allure.step(\"步骤4:添加虚端口vlan透传3000\"):\n            assert add_service_port(tn, PonID, OnuID, Gemport_ID, Vlan_list)\n        with allure.step(\"步骤5:onu端口绑定组播模板\"):\n            assert ont_multicast(tn, ponid=PonID, ontid=OnuID, ethid=Ont_Port_ID, ont_igmpprofile_id=200)\n        with allure.step(\"步骤6:onu组播打流测试\"):\n    \n            time.sleep(3)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n    \n            result = multicast_test(port_location=port_location,\n                           multicaststream_header=('ethernetII_1.destMacAdd=01:00:5e:02:02:02 vlan_1.id=3000 ipv4_1.destination=239.2.2.2'),\n                           multicastgroupip='239.2.2.2',\n                           check='abnormal',\n                           duration=10)\n            if result == 'PASS':\n                cdata_info(\"测试onu组播正常不通的情况:打流测试正常\")\n            else:\n                cdata_error(\"测试onu组播正常不通的情况:打流测试失败\")\n    \n>           assert result == 'PASS'\nE           AssertionError: assert 'FAIL' == 'PASS'\nE             - FAIL\nE             + PASS\n\ntest_onu_multicast.py:154: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "__pytest_repeat_step_number",
    "time" : {
      "start" : 1594693262889,
      "stop" : 1594693262889,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "base_url",
    "time" : {
      "start" : 1594692413999,
      "stop" : 1594692413999,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_skip_sensitive",
    "time" : {
      "start" : 1594693262889,
      "stop" : 1594693262889,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "sensitive_url",
    "time" : {
      "start" : 1594692414000,
      "stop" : 1594692414000,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "login",
    "time" : {
      "start" : 1594693262890,
      "stop" : 1594693275940,
      "duration" : 13050
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_verify_url",
    "time" : {
      "start" : 1594692413999,
      "stop" : 1594692413999,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n    用例描述\n    测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为3000，测试onu为snooping模式下组播239.2.2.2是否不通\n    测试步骤：\n    步骤1:发现未注册的ONU\n    步骤2:在OLT上通过SN的方式将ONU注册上线\n    步骤3:配置onu端口native-vlan为3000\n    步骤4:添加虚端口vlan透传3000\n    步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n    步骤6:打流测试\n    1）客户端发送report报文加入组播239.2.2.2 ，然后服务端口发送组播239.2.2.2的数据流\n    预期结果：服务端口收到report报文收不到，客户端接收不到组播239.2.2.2的组播数据流\n\n    ",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
    "statusTrace" : "login = <telnetlib.Telnet object at 0x000002C9619E15C0>\n\n    @allure.feature(\"onu 组播测试\")\n    @allure.story(\"onu 组播snooping测试\")\n    @allure.title(\"测试onu组播正常不通的情况\")\n    @pytest.mark.run(order=23)\n    def test_ont_snooping_002(login):\n        '''\n        用例描述\n        测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为3000，测试onu为snooping模式下组播239.2.2.2是否不通\n        测试步骤：\n        步骤1:发现未注册的ONU\n        步骤2:在OLT上通过SN的方式将ONU注册上线\n        步骤3:配置onu端口native-vlan为3000\n        步骤4:添加虚端口vlan透传3000\n        步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n        步骤6:打流测试\n        1）客户端发送report报文加入组播239.2.2.2 ，然后服务端口发送组播239.2.2.2的数据流\n        预期结果：服务端口收到report报文收不到，客户端接收不到组播239.2.2.2的组播数据流\n    \n        '''\n        cdata_info(\"=========ONU组播snooping测试:组播正常不通=========\")\n        tn = login\n        Vlan_list = [3000]\n        User_Vlan = \"3000\"\n        with allure.step('步骤1:发现未注册的ONU。'):\n            assert autofind_onu(tn, PonID, OnuID, SN)\n        with allure.step('步骤2:在OLT上通过SN的方式将ONU注册上线。'):\n            assert auth_by_sn(tn, PonID, OnuID, Ont_Lineprofile_ID, Ont_Srvprofile_ID, SN)\n        with allure.step(\"步骤3:配置onu端口native-vlan为3000\"):\n            assert ont_native_vlan(tn, PonID, OnuID, Ont_Port_ID, User_Vlan)\n        with allure.step(\"步骤4:添加虚端口vlan透传3000\"):\n            assert add_service_port(tn, PonID, OnuID, Gemport_ID, Vlan_list)\n        with allure.step(\"步骤5:onu端口绑定组播模板\"):\n            assert ont_multicast(tn, ponid=PonID, ontid=OnuID, ethid=Ont_Port_ID, ont_igmpprofile_id=200)\n        with allure.step(\"步骤6:onu组播打流测试\"):\n    \n            time.sleep(3)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n    \n            result = multicast_test(port_location=port_location,\n                           multicaststream_header=('ethernetII_1.destMacAdd=01:00:5e:02:02:02 vlan_1.id=3000 ipv4_1.destination=239.2.2.2'),\n                           multicastgroupip='239.2.2.2',\n                           check='abnormal',\n                           duration=10)\n            if result == 'PASS':\n                cdata_info(\"测试onu组播正常不通的情况:打流测试正常\")\n            else:\n                cdata_error(\"测试onu组播正常不通的情况:打流测试失败\")\n    \n>           assert result == 'PASS'\nE           AssertionError: assert 'FAIL' == 'PASS'\nE             - FAIL\nE             + PASS\n\ntest_onu_multicast.py:154: AssertionError",
    "steps" : [ {
      "name" : "步骤1:发现未注册的ONU。",
      "time" : {
        "start" : 1594693275941,
        "stop" : 1594693277050,
        "duration" : 1109
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "步骤2:在OLT上通过SN的方式将ONU注册上线。",
      "time" : {
        "start" : 1594693277050,
        "stop" : 1594693298862,
        "duration" : 21812
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "步骤3:配置onu端口native-vlan为3000",
      "time" : {
        "start" : 1594693298862,
        "stop" : 1594693299004,
        "duration" : 142
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "步骤4:添加虚端口vlan透传3000",
      "time" : {
        "start" : 1594693299004,
        "stop" : 1594693303032,
        "duration" : 4028
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "步骤5:onu端口绑定组播模板",
      "time" : {
        "start" : 1594693303032,
        "stop" : 1594693305204,
        "duration" : 2172
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "步骤6:onu组播打流测试",
      "time" : {
        "start" : 1594693305205,
        "stop" : 1594693356767,
        "duration" : 51562
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS\n",
      "statusTrace" : "  File \"E:\\CDATA\\自动化测试\\Cdata_part11\\tests\\GponSfu\\test_onu_multicast.py\", line 154, in test_ont_snooping_002\n    assert result == 'PASS'\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "bab4a435ce5860a4",
      "name" : "log",
      "source" : "bab4a435ce5860a4.txt",
      "type" : "text/plain",
      "size" : 2344
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 6,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "login::0",
    "time" : {
      "start" : 1594693357087,
      "stop" : 1594693366198,
      "duration" : 9111
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "onu 组播测试"
  }, {
    "name" : "story",
    "value" : "onu 组播snooping测试"
  }, {
    "name" : "suite",
    "value" : "test_onu_multicast"
  }, {
    "name" : "host",
    "value" : "DESKTOP-2JV12RE"
  }, {
    "name" : "thread",
    "value" : "34000-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_onu_multicast"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "4f56ea274bb27d21",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
      "time" : {
        "start" : 1594274297312,
        "stop" : 1594274376695,
        "duration" : 79383
      }
    }, {
      "uid" : "adb16119e35b351a",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
      "time" : {
        "start" : 1594273512909,
        "stop" : 1594273592402,
        "duration" : 79493
      }
    }, {
      "uid" : "84498e15bb440965",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
      "time" : {
        "start" : 1594273072688,
        "stop" : 1594273142293,
        "duration" : 69605
      }
    }, {
      "uid" : "498b1770c40090f6",
      "status" : "broken",
      "statusDetails" : "Exception: bring online port(Port_3) failed",
      "time" : {
        "start" : 1594272633065,
        "stop" : 1594272672718,
        "duration" : 39653
      }
    }, {
      "uid" : "3766451e8c910364",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
      "time" : {
        "start" : 1594198868511,
        "stop" : 1594198920692,
        "duration" : 52181
      }
    }, {
      "uid" : "560adf4cacf83fc4",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
      "time" : {
        "start" : 1594172685604,
        "stop" : 1594172739025,
        "duration" : 53421
      }
    }, {
      "uid" : "8599e85122782dbe",
      "status" : "broken",
      "statusDetails" : "TypeError: 'bool' object is not subscriptable",
      "time" : {
        "start" : 1594171062648,
        "stop" : 1594171062648,
        "duration" : 0
      }
    }, {
      "uid" : "b0ed47816b4599d9",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert False\n +  where False = autofind_onu(<telnetlib.Telnet object at 0x000002E21D394DD8>, '16', '2', '5A54453171200033')",
      "time" : {
        "start" : 1594128203646,
        "stop" : 1594128203646,
        "duration" : 0
      }
    }, {
      "uid" : "ec7dd373ae2fbb55",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
      "time" : {
        "start" : 1594122864194,
        "stop" : 1594122919409,
        "duration" : 55215
      }
    }, {
      "uid" : "91a845f18c989f90",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert False\n +  where False = autofind_onu(<telnetlib.Telnet object at 0x0000027E357592E8>, '16', '2', '5A54453171200033')",
      "time" : {
        "start" : 1594112781842,
        "stop" : 1594112781842,
        "duration" : 0
      }
    }, {
      "uid" : "d320f9df2c3d1734",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert False\n +  where False = auth_by_sn(<telnetlib.Telnet object at 0x00000208DF55E8D0>, '16', '2', '200', '200', '5A54453171200033')",
      "time" : {
        "start" : 1594038127365,
        "stop" : 1594038127366,
        "duration" : 1
      }
    }, {
      "uid" : "4b074ea4f25edf95",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert False\n +  where False = auth_by_sn(<telnetlib.Telnet object at 0x00000208E29E3BE0>, '16', '2', '200', '200', '5A54453171200033')",
      "time" : {
        "start" : 1594038039264,
        "stop" : 1594038039264,
        "duration" : 0
      }
    }, {
      "uid" : "b43f0d1c284a4993",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert False\n +  where False = auth_by_sn(<telnetlib.Telnet object at 0x00000208E29637F0>, '16', '2', '200', '200', '5A54453171200033')",
      "time" : {
        "start" : 1594037950821,
        "stop" : 1594037950821,
        "duration" : 0
      }
    }, {
      "uid" : "90d8d57dae09806b",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
      "time" : {
        "start" : 1594021720761,
        "stop" : 1594021771358,
        "duration" : 50597
      }
    }, {
      "uid" : "33aa90fd235c3f29",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
      "time" : {
        "start" : 1594021624138,
        "stop" : 1594021674555,
        "duration" : 50417
      }
    }, {
      "uid" : "fe559d8f9701475a",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
      "time" : {
        "start" : 1594021528002,
        "stop" : 1594021577436,
        "duration" : 49434
      }
    }, {
      "uid" : "ab244e4fde8119bb",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
      "time" : {
        "start" : 1594019955192,
        "stop" : 1594020005569,
        "duration" : 50377
      }
    }, {
      "uid" : "8ed837516de6917b",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
      "time" : {
        "start" : 1594019859373,
        "stop" : 1594019913315,
        "duration" : 53942
      }
    }, {
      "uid" : "e600baca6a1cd196",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
      "time" : {
        "start" : 1594019769416,
        "stop" : 1594019821284,
        "duration" : 51868
      }
    }, {
      "uid" : "de1014a81f646de",
      "status" : "broken",
      "statusDetails" : "TypeError: 'bool' object is not subscriptable",
      "time" : {
        "start" : 1593999788502,
        "stop" : 1593999788502,
        "duration" : 0
      }
    }, {
      "uid" : "f573e76e4ab2dc7d",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
      "time" : {
        "start" : 1593772203473,
        "stop" : 1593772254377,
        "duration" : 50904
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "dd098d8519c5d5a.json",
  "parameterValues" : [ ]
}