{
  "uid" : "110c2bfd19fbf641",
  "name" : "测试onu端口vlan为translate",
  "fullName" : "test_onu_vlan#test_onu_translate",
  "historyId" : "9506ea21374c4ffe3bebd89caf02b26b",
  "time" : {
    "start" : 1594282957301,
    "stop" : 1594283039325,
    "duration" : 82024
  },
  "description" : "\n    用例描述\n    测试目的： 测试onu端口为translate，translate100-107 转2000-2007,测试上下行流量是否正常\n    测试步骤：\n    步骤1: 发现未注册的ONU\n    步骤2: 在OLT上通过SN的方式将ONU注册上线\n    步骤3：配置onu端口translate(100-800)转成（2000-2007）\n    步骤4：添加虚端口vlan透传2000,2001,2002, 2003, 2004, 2005, 2006, 2007, 2008\n    步骤5：打流测试\n    1）下行发vlan2000-2008的流，上行发vlan100-108的流\n    预期结果: 下行vlan2000-2007的通，下行vlan2008的不通；上行vlan100-107的通，下行vlan108的不通\n    步骤6：onu端口vlan恢复为transparent\n    ",
  "descriptionHtml" : "<pre><code>用例描述\n测试目的： 测试onu端口为translate，translate100-107 转2000-2007,测试上下行流量是否正常\n测试步骤：\n步骤1: 发现未注册的ONU\n步骤2: 在OLT上通过SN的方式将ONU注册上线\n步骤3：配置onu端口translate(100-800)转成（2000-2007）\n步骤4：添加虚端口vlan透传2000,2001,2002, 2003, 2004, 2005, 2006, 2007, 2008\n步骤5：打流测试\n1）下行发vlan2000-2008的流，上行发vlan100-108的流\n预期结果: 下行vlan2000-2007的通，下行vlan2008的不通；上行vlan100-107的通，下行vlan108的不通\n步骤6：onu端口vlan恢复为transparent\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
  "statusTrace" : "login = <telnetlib.Telnet object at 0x0000026C3BD4DD30>\n\n    @allure.feature(\"onu端口vlan测试\")\n    @allure.story(\"onu端口vlan测试\")\n    @allure.title(\"测试onu端口vlan为translate\")\n    @pytest.mark.run(order=17)\n    def test_onu_translate(login):\n        '''\n        用例描述\n        测试目的： 测试onu端口为translate，translate100-107 转2000-2007,测试上下行流量是否正常\n        测试步骤：\n        步骤1: 发现未注册的ONU\n        步骤2: 在OLT上通过SN的方式将ONU注册上线\n        步骤3：配置onu端口translate(100-800)转成（2000-2007）\n        步骤4：添加虚端口vlan透传2000,2001,2002, 2003, 2004, 2005, 2006, 2007, 2008\n        步骤5：打流测试\n        1）下行发vlan2000-2008的流，上行发vlan100-108的流\n        预期结果: 下行vlan2000-2007的通，下行vlan2008的不通；上行vlan100-107的通，下行vlan108的不通\n        步骤6：onu端口vlan恢复为transparent\n        '''\n    \n        cdata_info(\"=========测试ONU端口vlan为translate=========\")\n        Vlan_list = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008]\n        tn = login\n        with allure.step('步骤1:发现未注册的ONU。'):\n            assert autofind_onu(tn, PonID, OnuID, SN)\n        with allure.step('步骤2:在OLT上通过SN的方式将ONU注册上线。'):\n            assert auth_by_sn(tn, PonID, OnuID, Ont_Lineprofile_ID, Ont_Srvprofile_ID, SN)\n        with allure.step(\"步骤3:配置onu端口translate(100-800)转成（2000-2007）\"):\n            assert ont_port_translate(tn, ont_srvprofile_id=Ont_Srvprofile_ID)\n        with allure.step(\"步骤4:添加虚端口vlan透传2000,2001,2002, 2003, 2004, 2005, 2006, 2007, 2008\"):\n            assert add_service_port(tn, PonID, OnuID, Gemport_ID, Vlan_list)\n        with  allure.step(\"步骤5:打流测试\"):\n            # 清除测试仪的对象，防止影响下个用例的执行\n            time.sleep(3)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n    \n            #'//192.168.0.180/1/9'连接上联口，'//192.168.0.180/1/10'连接onu端口\n            port_location = ['//192.168.0.180/1/9', '//192.168.0.180/1/10']\n            #跑流的时长为10s\n            duration = 10\n            # 发流量测试，发送三条流vlan100，和vlan200,和vlan300\n            down_stream_header = (\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:11 vlan_1.id=2000  ethernetII_1.destMacAdd=00:00:00:22:22:21',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:12 vlan_1.id=2001  ethernetII_1.destMacAdd=00:00:00:22:22:22',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:13 vlan_1.id=2002  ethernetII_1.destMacAdd=00:00:00:22:22:23',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:14 vlan_1.id=2003  ethernetII_1.destMacAdd=00:00:00:22:22:24',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:15 vlan_1.id=2004  ethernetII_1.destMacAdd=00:00:00:22:22:25',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:16 vlan_1.id=2005  ethernetII_1.destMacAdd=00:00:00:22:22:26',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:17 vlan_1.id=2006  ethernetII_1.destMacAdd=00:00:00:22:22:27',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:18 vlan_1.id=2007  ethernetII_1.destMacAdd=00:00:00:22:22:28',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:19 vlan_1.id=2008  ethernetII_1.destMacAdd=00:00:00:22:22:29'\n            )\n    \n            up_stream_header = (\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:21 vlan_1.id=100  ethernetII_1.destMacAdd=00:00:00:11:11:11',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:22 vlan_1.id=101  ethernetII_1.destMacAdd=00:00:00:11:11:12',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:23 vlan_1.id=102  ethernetII_1.destMacAdd=00:00:00:11:11:13',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:24 vlan_1.id=103  ethernetII_1.destMacAdd=00:00:00:11:11:14',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:25 vlan_1.id=104  ethernetII_1.destMacAdd=00:00:00:11:11:15',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:26 vlan_1.id=105  ethernetII_1.destMacAdd=00:00:00:11:11:16',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:27 vlan_1.id=106 ethernetII_1.destMacAdd=00:00:00:11:11:17',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:28 vlan_1.id=107 ethernetII_1.destMacAdd=00:00:00:11:11:18',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:29 vlan_1.id=108  ethernetII_1.destMacAdd=00:00:00:11:11:19'\n            )\n            result_stats = unicast_test(port_location=port_location, down_stream_header=down_stream_header,\n                                        up_stream_header=up_stream_header, num=9, dataclassname=StreamBlockStats,\n                                        duration=duration)\n    \n            for i in range(18):\n                if (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:11':\n                    result11 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:12':\n                    result12 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:13':\n                    result13 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:14':\n                    result14 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:15':\n                    result15 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:16':\n                    result16 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:17':\n                    result17 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:18':\n                    result18 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:21':\n                    result21 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:22':\n                    result22 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:23':\n                    result23 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:24':\n                    result24 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:25':\n                    result25 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:26':\n                    result26 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:27':\n                    result27 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:28':\n                    result28 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:19':\n                    result19 = check_stream_loss1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:29':\n                    result29 = check_stream_loss1(result_stats[i])\n    \n            # 恢复默认配置\n            # ont_port_trunk_del(tn)\n    \n            # 正确的结果vlan2000和vlan2001的能通，vlan2002的不通\n            if result11 == 'PASS' and result12 == 'PASS' and result13 == 'PASS' and result14 == 'PASS' \\\n                    and result15 == 'PASS' and result16 == 'PASS' and result17 == 'PASS' and result18 == 'PASS' \\\n                    and result21 == 'PASS' and result22 == 'PASS' and result23 == 'PASS' and result24 == 'PASS' \\\n                    and result25 == 'PASS' and result26 == 'PASS' and result27 == 'PASS' \\\n                    and result19 == 'PASS' and result29 == 'PASS':\n                result = 'PASS'\n                cdata_info(\"ONU端口为translate:打流测试正常\")\n            else:\n                result = 'FAIL'\n                cdata_error(\"ONU端口为translate:打流测试失败\")\n>           assert result == 'PASS'\nE           AssertionError: assert 'FAIL' == 'PASS'\nE             - FAIL\nE             + PASS\n\ntest_onu_vlan.py:386: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_verify_url",
    "time" : {
      "start" : 1594281048001,
      "stop" : 1594281048001,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_skip_sensitive",
    "time" : {
      "start" : 1594282944241,
      "stop" : 1594282944242,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "__pytest_repeat_step_number",
    "time" : {
      "start" : 1594282944241,
      "stop" : 1594282944241,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "base_url",
    "time" : {
      "start" : 1594281048001,
      "stop" : 1594281048001,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "login",
    "time" : {
      "start" : 1594282944242,
      "stop" : 1594282957297,
      "duration" : 13055
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "sensitive_url",
    "time" : {
      "start" : 1594281048001,
      "stop" : 1594281048001,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n    用例描述\n    测试目的： 测试onu端口为translate，translate100-107 转2000-2007,测试上下行流量是否正常\n    测试步骤：\n    步骤1: 发现未注册的ONU\n    步骤2: 在OLT上通过SN的方式将ONU注册上线\n    步骤3：配置onu端口translate(100-800)转成（2000-2007）\n    步骤4：添加虚端口vlan透传2000,2001,2002, 2003, 2004, 2005, 2006, 2007, 2008\n    步骤5：打流测试\n    1）下行发vlan2000-2008的流，上行发vlan100-108的流\n    预期结果: 下行vlan2000-2007的通，下行vlan2008的不通；上行vlan100-107的通，下行vlan108的不通\n    步骤6：onu端口vlan恢复为transparent\n    ",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS",
    "statusTrace" : "login = <telnetlib.Telnet object at 0x0000026C3BD4DD30>\n\n    @allure.feature(\"onu端口vlan测试\")\n    @allure.story(\"onu端口vlan测试\")\n    @allure.title(\"测试onu端口vlan为translate\")\n    @pytest.mark.run(order=17)\n    def test_onu_translate(login):\n        '''\n        用例描述\n        测试目的： 测试onu端口为translate，translate100-107 转2000-2007,测试上下行流量是否正常\n        测试步骤：\n        步骤1: 发现未注册的ONU\n        步骤2: 在OLT上通过SN的方式将ONU注册上线\n        步骤3：配置onu端口translate(100-800)转成（2000-2007）\n        步骤4：添加虚端口vlan透传2000,2001,2002, 2003, 2004, 2005, 2006, 2007, 2008\n        步骤5：打流测试\n        1）下行发vlan2000-2008的流，上行发vlan100-108的流\n        预期结果: 下行vlan2000-2007的通，下行vlan2008的不通；上行vlan100-107的通，下行vlan108的不通\n        步骤6：onu端口vlan恢复为transparent\n        '''\n    \n        cdata_info(\"=========测试ONU端口vlan为translate=========\")\n        Vlan_list = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008]\n        tn = login\n        with allure.step('步骤1:发现未注册的ONU。'):\n            assert autofind_onu(tn, PonID, OnuID, SN)\n        with allure.step('步骤2:在OLT上通过SN的方式将ONU注册上线。'):\n            assert auth_by_sn(tn, PonID, OnuID, Ont_Lineprofile_ID, Ont_Srvprofile_ID, SN)\n        with allure.step(\"步骤3:配置onu端口translate(100-800)转成（2000-2007）\"):\n            assert ont_port_translate(tn, ont_srvprofile_id=Ont_Srvprofile_ID)\n        with allure.step(\"步骤4:添加虚端口vlan透传2000,2001,2002, 2003, 2004, 2005, 2006, 2007, 2008\"):\n            assert add_service_port(tn, PonID, OnuID, Gemport_ID, Vlan_list)\n        with  allure.step(\"步骤5:打流测试\"):\n            # 清除测试仪的对象，防止影响下个用例的执行\n            time.sleep(3)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n    \n            #'//192.168.0.180/1/9'连接上联口，'//192.168.0.180/1/10'连接onu端口\n            port_location = ['//192.168.0.180/1/9', '//192.168.0.180/1/10']\n            #跑流的时长为10s\n            duration = 10\n            # 发流量测试，发送三条流vlan100，和vlan200,和vlan300\n            down_stream_header = (\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:11 vlan_1.id=2000  ethernetII_1.destMacAdd=00:00:00:22:22:21',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:12 vlan_1.id=2001  ethernetII_1.destMacAdd=00:00:00:22:22:22',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:13 vlan_1.id=2002  ethernetII_1.destMacAdd=00:00:00:22:22:23',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:14 vlan_1.id=2003  ethernetII_1.destMacAdd=00:00:00:22:22:24',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:15 vlan_1.id=2004  ethernetII_1.destMacAdd=00:00:00:22:22:25',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:16 vlan_1.id=2005  ethernetII_1.destMacAdd=00:00:00:22:22:26',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:17 vlan_1.id=2006  ethernetII_1.destMacAdd=00:00:00:22:22:27',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:18 vlan_1.id=2007  ethernetII_1.destMacAdd=00:00:00:22:22:28',\n                'ethernetII_1.sourceMacAdd=00:00:00:11:11:19 vlan_1.id=2008  ethernetII_1.destMacAdd=00:00:00:22:22:29'\n            )\n    \n            up_stream_header = (\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:21 vlan_1.id=100  ethernetII_1.destMacAdd=00:00:00:11:11:11',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:22 vlan_1.id=101  ethernetII_1.destMacAdd=00:00:00:11:11:12',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:23 vlan_1.id=102  ethernetII_1.destMacAdd=00:00:00:11:11:13',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:24 vlan_1.id=103  ethernetII_1.destMacAdd=00:00:00:11:11:14',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:25 vlan_1.id=104  ethernetII_1.destMacAdd=00:00:00:11:11:15',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:26 vlan_1.id=105  ethernetII_1.destMacAdd=00:00:00:11:11:16',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:27 vlan_1.id=106 ethernetII_1.destMacAdd=00:00:00:11:11:17',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:28 vlan_1.id=107 ethernetII_1.destMacAdd=00:00:00:11:11:18',\n                'ethernetII_1.sourceMacAdd=00:00:00:22:22:29 vlan_1.id=108  ethernetII_1.destMacAdd=00:00:00:11:11:19'\n            )\n            result_stats = unicast_test(port_location=port_location, down_stream_header=down_stream_header,\n                                        up_stream_header=up_stream_header, num=9, dataclassname=StreamBlockStats,\n                                        duration=duration)\n    \n            for i in range(18):\n                if (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:11':\n                    result11 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:12':\n                    result12 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:13':\n                    result13 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:14':\n                    result14 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:15':\n                    result15 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:16':\n                    result16 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:17':\n                    result17 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:18':\n                    result18 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:21':\n                    result21 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:22':\n                    result22 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:23':\n                    result23 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:24':\n                    result24 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:25':\n                    result25 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:26':\n                    result26 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:27':\n                    result27 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:28':\n                    result28 = check_stream_static1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:11:11:19':\n                    result19 = check_stream_loss1(result_stats[i])\n                elif (result_stats[i].__dict__)['_StreamBlockID'] == 'sourceMacAdd=00:00:00:22:22:29':\n                    result29 = check_stream_loss1(result_stats[i])\n    \n            # 恢复默认配置\n            # ont_port_trunk_del(tn)\n    \n            # 正确的结果vlan2000和vlan2001的能通，vlan2002的不通\n            if result11 == 'PASS' and result12 == 'PASS' and result13 == 'PASS' and result14 == 'PASS' \\\n                    and result15 == 'PASS' and result16 == 'PASS' and result17 == 'PASS' and result18 == 'PASS' \\\n                    and result21 == 'PASS' and result22 == 'PASS' and result23 == 'PASS' and result24 == 'PASS' \\\n                    and result25 == 'PASS' and result26 == 'PASS' and result27 == 'PASS' \\\n                    and result19 == 'PASS' and result29 == 'PASS':\n                result = 'PASS'\n                cdata_info(\"ONU端口为translate:打流测试正常\")\n            else:\n                result = 'FAIL'\n                cdata_error(\"ONU端口为translate:打流测试失败\")\n>           assert result == 'PASS'\nE           AssertionError: assert 'FAIL' == 'PASS'\nE             - FAIL\nE             + PASS\n\ntest_onu_vlan.py:386: AssertionError",
    "steps" : [ {
      "name" : "步骤1:发现未注册的ONU。",
      "time" : {
        "start" : 1594282957318,
        "stop" : 1594282958496,
        "duration" : 1178
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "步骤2:在OLT上通过SN的方式将ONU注册上线。",
      "time" : {
        "start" : 1594282958496,
        "stop" : 1594282972422,
        "duration" : 13926
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "步骤3:配置onu端口translate(100-800)转成（2000-2007）",
      "time" : {
        "start" : 1594282972422,
        "stop" : 1594282993694,
        "duration" : 21272
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "步骤4:添加虚端口vlan透传2000,2001,2002, 2003, 2004, 2005, 2006, 2007, 2008",
      "time" : {
        "start" : 1594282993694,
        "stop" : 1594283003773,
        "duration" : 10079
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "步骤5:打流测试",
      "time" : {
        "start" : 1594283003773,
        "stop" : 1594283039323,
        "duration" : 35550
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: assert 'FAIL' == 'PASS'\n  - FAIL\n  + PASS\n",
      "statusTrace" : "  File \"E:\\CDATA\\自动化测试\\Cdata_part11\\tests\\GponSfu\\test_onu_vlan.py\", line 386, in test_onu_translate\n    assert result == 'PASS'\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "292b3a36b5f6e8ee",
      "name" : "log",
      "source" : "292b3a36b5f6e8ee.txt",
      "type" : "text/plain",
      "size" : 5912
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 5,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "login::0",
    "time" : {
      "start" : 1594283039546,
      "stop" : 1594283052761,
      "duration" : 13215
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "onu端口vlan测试"
  }, {
    "name" : "story",
    "value" : "onu端口vlan测试"
  }, {
    "name" : "suite",
    "value" : "test_onu_vlan"
  }, {
    "name" : "host",
    "value" : "DESKTOP-2JV12RE"
  }, {
    "name" : "thread",
    "value" : "28716-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_onu_vlan"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "__pytest_repeat_step_number",
    "value" : "1"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "110c2bfd19fbf641.json",
  "parameterValues" : [ "1" ]
}