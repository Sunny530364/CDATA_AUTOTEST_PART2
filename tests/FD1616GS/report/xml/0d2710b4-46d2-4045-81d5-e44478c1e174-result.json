{"name": "测试onu跨组播vlan", "status": "broken", "statusDetails": {"message": "Exception: bring online port(Port_5) failed", "trace": "login = <telnetlib.Telnet object at 0x000001CEDF751F28>\n\n    @allure.feature(\"onu 组播测试\")\n    @allure.story(\"onu 组播snooping测试\")\n    @allure.title(\"测试onu跨组播vlan\")\n    @pytest.mark.run(order=24)\n    def test_ont_cross_mvlan(login):\n        '''\n        用例描述\n        测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为2000，测试onu的跨组播vlan是否正常的\n        测试步骤：\n        步骤1:发现未注册的ONU\n        步骤2:在OLT上通过SN的方式将ONU注册上线\n        步骤3:配置onu端口native-vlan为2000\n        步骤4:添加虚端口vlan透传2000\n        步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n        步骤6:打流测试\n        1）客户端发送report报文加入组播239.1.1.1 ，然后服务端口发送组播239.1.1.1的数据流，10秒后，停止发流\n        预期结果：服务端收到report报文，客户端收到组播数据流239.1.1.1\n        2)服务端发送组播数据流，客户端发送离开报文，离开组播组239.1.1.1\n        预期结果：客户端接收不到数据\n    \n        '''\n        cdata_info(\"=========ONU组播snooping测试:跨组播vlan测试=========\")\n        tn = login\n        Vlan_list = [2000]\n        User_Vlan = \"2000\"\n        with allure.step('步骤1:发现未注册的ONU。'):\n            assert autofind_onu(tn, PonID, OnuID, SN)\n        with allure.step('步骤2:在OLT上通过SN的方式将ONU注册上线。'):\n            assert auth_by_sn(tn, PonID, OnuID, Ont_Lineprofile_ID, Ont_Srvprofile_ID, SN)\n        with allure.step(\"步骤3：配置onu端口native-vlan为2000\"):\n            assert ont_native_vlan(tn, PonID, OnuID, Ont_Port_ID, User_Vlan)\n        with allure.step(\"步骤4：添加虚端口vlan透传2000\"):\n            assert add_service_port(tn, PonID, OnuID, Gemport_ID, Vlan_list)\n        with allure.step(\"步骤5:onu端口绑定组播模板\"):\n            assert ont_multicast(tn, ponid=PonID, ontid=OnuID, ethid=Ont_Port_ID, ont_igmpprofile_id=Ont_Igmpprofile_ID)\n        with allure.step(\"步骤6:onu组播打流测试\"):\n    \n            time.sleep(3)\n            reset_rom_cmd = ResetROMCommand()\n            reset_rom_cmd.execute()\n    \n            # 发流测试\n            result = multicast_test(port_location=['//192.168.0.180/1/9', '//192.168.0.180/1/10'],\n                                    multicaststream_header=('ethernetII_1.destMacAdd=01:00:5e:01:01:01 vlan_1.id=3000 ipv4_1.destination=239.1.1.1'),\n                                    multicastgroupip='239.1.1.1',\n>                                   duration=10)\n\ntest_onu_multicast.py:201: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\src\\xinertel\\muticast11.py:311: in multicast_test\n    port1,port2 = create_ports(sys_entry,port_location)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsys_entry = <renix_py_api.api_gen.SysEntry_Autogen.SysEntry object at 0x000001CEDCBE1160>\nlocation = ['//192.168.0.180/1/9', '//192.168.0.180/1/10']\n\n    def create_ports(sys_entry, location):\n        '''\n        连接测试仪，预约端口并且使端口上线\n        :param sys_entry:创建测试仪的根节点\n        :param location: 存放端口\n        :return:port\n        '''\n        renix_info('create ports with location:'.format(location))\n        port1 = Port(upper=sys_entry, location=location[0])\n        port2 = Port(upper=sys_entry, location=location[1])\n        assert port1.handle\n        assert port2.handle\n        bring_port_online_cmd = BringPortsOnlineCommand(portlist=[port1.handle, port2.handle])\n        bring_port_online_cmd.execute()\n        if not wait_port_online(port1):\n>           raise Exception('bring online port({}) failed'.format(port1.handle))\nE           Exception: bring online port(Port_5) failed\n\n..\\..\\src\\xinertel\\muticast11.py:31: Exception"}, "description": "\n    用例描述\n    测试目的：ont为snooping模式（mvlan为3000，ip 239.1.1.1）,onu的native-vlan为2000，测试onu的跨组播vlan是否正常的\n    测试步骤：\n    步骤1:发现未注册的ONU\n    步骤2:在OLT上通过SN的方式将ONU注册上线\n    步骤3:配置onu端口native-vlan为2000\n    步骤4:添加虚端口vlan透传2000\n    步骤5:onu端口绑定组播模板200（mvlan3000 ,ip 239.1.1.1 ,dynamic acl）\n    步骤6:打流测试\n    1）客户端发送report报文加入组播239.1.1.1 ，然后服务端口发送组播239.1.1.1的数据流，10秒后，停止发流\n    预期结果：服务端收到report报文，客户端收到组播数据流239.1.1.1\n    2)服务端发送组播数据流，客户端发送离开报文，离开组播组239.1.1.1\n    预期结果：客户端接收不到数据\n\n    ", "steps": [{"name": "步骤1:发现未注册的ONU。", "status": "passed", "start": 1594272696954, "stop": 1594272698072}, {"name": "步骤2:在OLT上通过SN的方式将ONU注册上线。", "status": "passed", "start": 1594272698072, "stop": 1594272713876}, {"name": "步骤3：配置onu端口native-vlan为2000", "status": "passed", "start": 1594272713876, "stop": 1594272714013}, {"name": "步骤4：添加虚端口vlan透传2000", "status": "passed", "start": 1594272714013, "stop": 1594272718042}, {"name": "步骤5:onu端口绑定组播模板", "status": "passed", "start": 1594272718042, "stop": 1594272720255}, {"name": "步骤6:onu组播打流测试", "status": "broken", "statusDetails": {"message": "Exception: bring online port(Port_5) failed\n", "trace": "  File \"E:\\CDATA\\自动化测试\\Cdata_part11\\tests\\GponSfu\\test_onu_multicast.py\", line 201, in test_ont_cross_mvlan\n    duration=10)\n  File \"E:\\CDATA\\自动化测试\\Cdata_part11\\src\\xinertel\\muticast11.py\", line 311, in multicast_test\n    port1,port2 = create_ports(sys_entry,port_location)\n  File \"E:\\CDATA\\自动化测试\\Cdata_part11\\src\\xinertel\\muticast11.py\", line 31, in create_ports\n    raise Exception('bring online port({}) failed'.format(port1.handle))\n"}, "start": 1594272720255, "stop": 1594272736705}], "attachments": [{"name": "log", "source": "2509d551-7b20-4e41-927a-76cbb3269a93-attachment.txt", "type": "text/plain"}], "start": 1594272696953, "stop": 1594272736705, "uuid": "8ee3673f-ea8e-4c37-9048-a747c24a167b", "historyId": "9243f40ca1ff480677bc2d6ac7954ee9", "testCaseId": "389241c647b5a95fc8f3d148f9b77ae8", "fullName": "test_onu_multicast#test_ont_cross_mvlan", "labels": [{"name": "feature", "value": "onu 组播测试"}, {"name": "story", "value": "onu 组播snooping测试"}, {"name": "suite", "value": "test_onu_multicast"}, {"name": "host", "value": "DESKTOP-2JV12RE"}, {"name": "thread", "value": "28720-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_onu_multicast"}]}